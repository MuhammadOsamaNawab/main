// Code generated by Thrift Compiler (0.18.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"talkservice"
)

var _ = talkservice.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, Settings settings)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  Room getRoom(string roomId)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKeysEx(bool ignoreE2EEStatus, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void respondE2EEKeyExchange(i32 reqSeq, string encryptedKeyChain, string hashKeyChain)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getLastE2EEGroupSharedKey(i32 keyVersion, string chatMid)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  Configurations getConfigurations(i64 revision, string regionOfUsim, string regionOfTelephone, string regionOfLocale, string carrier, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "  void setNotificationsEnabled(i32 reqSeq, MIDType type, string target, bool enablement)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)")
  fmt.Fprintln(os.Stderr, "   getCountries(CountryGroup countryGroup)")
  fmt.Fprintln(os.Stderr, "  bool registerUserid(i32 reqSeq, string searchId)")
  fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string searchId)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale, SIMInfo simInfo)")
  fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void updateAccountMigrationPincode(string accountMigrationPincode)")
  fmt.Fprintln(os.Stderr, "  void resendPinCode(string sessionId)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)")
  fmt.Fprintln(os.Stderr, "  void finishUpdateVerification(string sessionId)")
  fmt.Fprintln(os.Stderr, "  Settings getSettings(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id, string reference)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string searchId)")
  fmt.Fprintln(os.Stderr, "  void inviteFriendsBySms( phoneNumberList)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "   syncContacts(i32 reqSeq,  localContacts)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  Room createRoom(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "   getSessions()")
  fmt.Fprintln(os.Stderr, "  void logoutSession(string tokenKey)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo, string udidHash, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void sendEchoPush(string text)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey registerE2EEPublicKey(i32 reqSeq, E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getE2EEPublicKey(string mid, i32 keyVersion, i32 keyId)")
  fmt.Fprintln(os.Stderr, "  E2EENegotiationResult negotiateE2EEPublicKey(string mid)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey registerE2EEGroupKey(i32 keyVersion, string chatMid,  members,  keyIds,  encryptedSharedKeys)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := talkservice.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err461 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err461 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err462 := (strconv.Atoi(flag.Arg(2)))
    if err462 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err463 := (strconv.Atoi(flag.Arg(1)))
    if err463 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes2 requires 3 args")
      flag.Usage()
    }
    tmp0, err465 := (strconv.Atoi(flag.Arg(1)))
    if err465 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg466 := flag.Arg(2)
    mbTrans467 := thrift.NewTMemoryBufferLen(len(arg466))
    defer mbTrans467.Close()
    _, err468 := mbTrans467.WriteString(arg466)
    if err468 != nil { 
      Usage()
      return
    }
    factory469 := thrift.NewTJSONProtocolFactory()
    jsProt470 := factory469.GetProtocol(mbTrans467)
    containerStruct1 := talkservice.NewTalkServiceUpdateSettingsAttributes2Args()
    err471 := containerStruct1.ReadField2(context.Background(), jsProt470)
    if err471 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.AttributesToUpdate
    value1 := argvalue1
    arg472 := flag.Arg(3)
    mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
    defer mbTrans473.Close()
    _, err474 := mbTrans473.WriteString(arg472)
    if err474 != nil {
      Usage()
      return
    }
    factory475 := thrift.NewTJSONProtocolFactory()
    jsProt476 := factory475.GetProtocol(mbTrans473)
    argvalue2 := talkservice.NewSettings()
    err477 := argvalue2.Read(context.Background(), jsProt476)
    if err477 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetAllContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err479 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err479 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err480 := (strconv.Atoi(flag.Arg(2)))
    if err480 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err481 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err481 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err482 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err482 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err483 := (strconv.Atoi(flag.Arg(1)))
    if err483 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg484 := flag.Arg(2)
    mbTrans485 := thrift.NewTMemoryBufferLen(len(arg484))
    defer mbTrans485.Close()
    _, err486 := mbTrans485.WriteString(arg484)
    if err486 != nil {
      Usage()
      return
    }
    factory487 := thrift.NewTJSONProtocolFactory()
    jsProt488 := factory487.GetProtocol(mbTrans485)
    argvalue1 := talkservice.NewMessage()
    err489 := argvalue1.Read(context.Background(), jsProt488)
    if err489 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
      flag.Usage()
    }
    tmp0, err490 := (strconv.Atoi(flag.Arg(1)))
    if err490 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err493 := (strconv.Atoi(flag.Arg(4)))
    if err493 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getRoom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoom requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg495 := flag.Arg(1)
    mbTrans496 := thrift.NewTMemoryBufferLen(len(arg495))
    defer mbTrans496.Close()
    _, err497 := mbTrans496.WriteString(arg495)
    if err497 != nil {
      Usage()
      return
    }
    factory498 := thrift.NewTJSONProtocolFactory()
    jsProt499 := factory498.GetProtocol(mbTrans496)
    argvalue0 := talkservice.NewUpdateChatRequest()
    err500 := argvalue0.Read(context.Background(), jsProt499)
    if err500 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg501 := flag.Arg(1)
    mbTrans502 := thrift.NewTMemoryBufferLen(len(arg501))
    defer mbTrans502.Close()
    _, err503 := mbTrans502.WriteString(arg501)
    if err503 != nil {
      Usage()
      return
    }
    factory504 := thrift.NewTJSONProtocolFactory()
    jsProt505 := factory504.GetProtocol(mbTrans502)
    argvalue0 := talkservice.NewGetChatsRequest()
    err506 := argvalue0.Read(context.Background(), jsProt505)
    if err506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getE2EEPublicKeysEx":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKeysEx requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetE2EEPublicKeysEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "respondE2EEKeyExchange":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RespondE2EEKeyExchange requires 3 args")
      flag.Usage()
    }
    tmp0, err508 := (strconv.Atoi(flag.Arg(1)))
    if err508 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RespondE2EEKeyExchange(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getLastE2EEGroupSharedKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEGroupSharedKey requires 2 args")
      flag.Usage()
    }
    tmp0, err511 := (strconv.Atoi(flag.Arg(1)))
    if err511 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLastE2EEGroupSharedKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getConfigurations":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetConfigurations requires 6 args")
      flag.Usage()
    }
    argvalue0, err515 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err515 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    tmp5, err := (strconv.Atoi(flag.Arg(6)))
    if err != nil {
      Usage()
     return
    }
    argvalue5 := talkservice.SyncReason(tmp5)
    value5 := argvalue5
    fmt.Print(client.GetConfigurations(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "setNotificationsEnabled":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetNotificationsEnabled requires 4 args")
      flag.Usage()
    }
    tmp0, err520 := (strconv.Atoi(flag.Arg(1)))
    if err520 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.MIDType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.SetNotificationsEnabled(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getCountries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCountries requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.CountryGroup(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCountries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err525 := (strconv.Atoi(flag.Arg(1)))
    if err525 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "isUseridAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsUseridAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startUpdateVerification":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "StartUpdateVerification requires 8 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.CarrierCode(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg531 := flag.Arg(5)
    mbTrans532 := thrift.NewTMemoryBufferLen(len(arg531))
    defer mbTrans532.Close()
    _, err533 := mbTrans532.WriteString(arg531)
    if err533 != nil {
      Usage()
      return
    }
    factory534 := thrift.NewTJSONProtocolFactory()
    jsProt535 := factory534.GetProtocol(mbTrans532)
    argvalue4 := talkservice.NewDeviceInfo()
    err536 := argvalue4.Read(context.Background(), jsProt535)
    if err536 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    arg539 := flag.Arg(8)
    mbTrans540 := thrift.NewTMemoryBufferLen(len(arg539))
    defer mbTrans540.Close()
    _, err541 := mbTrans540.WriteString(arg539)
    if err541 != nil {
      Usage()
      return
    }
    factory542 := thrift.NewTJSONProtocolFactory()
    jsProt543 := factory542.GetProtocol(mbTrans540)
    argvalue7 := talkservice.NewSIMInfo()
    err544 := argvalue7.Read(context.Background(), jsProt543)
    if err544 != nil {
      Usage()
      return
    }
    value7 := argvalue7
    fmt.Print(client.StartUpdateVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "verifyPhoneNumber":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "updateAccountMigrationPincode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateAccountMigrationPincode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateAccountMigrationPincode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "resendPinCode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "changeVerificationMethod":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.VerificationMethod(tmp1)
    value1 := argvalue1
    fmt.Print(client.ChangeVerificationMethod(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "finishUpdateVerification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FinishUpdateVerification requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FinishUpdateVerification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err554 := (strconv.Atoi(flag.Arg(1)))
    if err554 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err556 := (strconv.Atoi(flag.Arg(1)))
    if err556 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err558 := (strconv.Atoi(flag.Arg(1)))
    if err558 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 3 args")
      flag.Usage()
    }
    tmp0, err560 := (strconv.Atoi(flag.Arg(1)))
    if err560 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnblockContact(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err563 := (strconv.Atoi(flag.Arg(1)))
    if err563 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ContactType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteFriendsBySms":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteFriendsBySms requires 1 args")
      flag.Usage()
    }
    arg567 := flag.Arg(1)
    mbTrans568 := thrift.NewTMemoryBufferLen(len(arg567))
    defer mbTrans568.Close()
    _, err569 := mbTrans568.WriteString(arg567)
    if err569 != nil { 
      Usage()
      return
    }
    factory570 := thrift.NewTJSONProtocolFactory()
    jsProt571 := factory570.GetProtocol(mbTrans568)
    containerStruct0 := talkservice.NewTalkServiceInviteFriendsBySmsArgs()
    err572 := containerStruct0.ReadField1(context.Background(), jsProt571)
    if err572 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PhoneNumberList
    value0 := argvalue0
    fmt.Print(client.InviteFriendsBySms(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg573 := flag.Arg(1)
    mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
    defer mbTrans574.Close()
    _, err575 := mbTrans574.WriteString(arg573)
    if err575 != nil { 
      Usage()
      return
    }
    factory576 := thrift.NewTJSONProtocolFactory()
    jsProt577 := factory576.GetProtocol(mbTrans574)
    containerStruct0 := talkservice.NewTalkServiceGetContactsArgs()
    err578 := containerStruct0.ReadField1(context.Background(), jsProt577)
    if err578 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "syncContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContacts requires 2 args")
      flag.Usage()
    }
    tmp0, err579 := (strconv.Atoi(flag.Arg(1)))
    if err579 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg580 := flag.Arg(2)
    mbTrans581 := thrift.NewTMemoryBufferLen(len(arg580))
    defer mbTrans581.Close()
    _, err582 := mbTrans581.WriteString(arg580)
    if err582 != nil { 
      Usage()
      return
    }
    factory583 := thrift.NewTJSONProtocolFactory()
    jsProt584 := factory583.GetProtocol(mbTrans581)
    containerStruct1 := talkservice.NewTalkServiceSyncContactsArgs()
    err585 := containerStruct1.ReadField2(context.Background(), jsProt584)
    if err585 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.LocalContacts
    value1 := argvalue1
    fmt.Print(client.SyncContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err586 := (strconv.Atoi(flag.Arg(1)))
    if err586 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ContactSetting(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
      flag.Usage()
    }
    tmp0, err589 := (strconv.Atoi(flag.Arg(1)))
    if err589 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err592 := (strconv.Atoi(flag.Arg(4)))
    if err592 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err593 := (strconv.Atoi(flag.Arg(1)))
    if err593 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err595 := (strconv.Atoi(flag.Arg(1)))
    if err595 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err597 := (strconv.Atoi(flag.Arg(1)))
    if err597 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg599 := flag.Arg(3)
    mbTrans600 := thrift.NewTMemoryBufferLen(len(arg599))
    defer mbTrans600.Close()
    _, err601 := mbTrans600.WriteString(arg599)
    if err601 != nil { 
      Usage()
      return
    }
    factory602 := thrift.NewTJSONProtocolFactory()
    jsProt603 := factory602.GetProtocol(mbTrans600)
    containerStruct2 := talkservice.NewTalkServiceInviteIntoRoomArgs()
    err604 := containerStruct2.ReadField3(context.Background(), jsProt603)
    if err604 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err605 := (strconv.Atoi(flag.Arg(1)))
    if err605 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg606 := flag.Arg(2)
    mbTrans607 := thrift.NewTMemoryBufferLen(len(arg606))
    defer mbTrans607.Close()
    _, err608 := mbTrans607.WriteString(arg606)
    if err608 != nil { 
      Usage()
      return
    }
    factory609 := thrift.NewTJSONProtocolFactory()
    jsProt610 := factory609.GetProtocol(mbTrans607)
    containerStruct1 := talkservice.NewTalkServiceCreateRoomArgs()
    err611 := containerStruct1.ReadField2(context.Background(), jsProt610)
    if err611 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg612 := flag.Arg(1)
    mbTrans613 := thrift.NewTMemoryBufferLen(len(arg612))
    defer mbTrans613.Close()
    _, err614 := mbTrans613.WriteString(arg612)
    if err614 != nil {
      Usage()
      return
    }
    factory615 := thrift.NewTJSONProtocolFactory()
    jsProt616 := factory615.GetProtocol(mbTrans613)
    argvalue0 := talkservice.NewInviteIntoChatRequest()
    err617 := argvalue0.Read(context.Background(), jsProt616)
    if err617 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg618 := flag.Arg(1)
    mbTrans619 := thrift.NewTMemoryBufferLen(len(arg618))
    defer mbTrans619.Close()
    _, err620 := mbTrans619.WriteString(arg618)
    if err620 != nil {
      Usage()
      return
    }
    factory621 := thrift.NewTJSONProtocolFactory()
    jsProt622 := factory621.GetProtocol(mbTrans619)
    argvalue0 := talkservice.NewDeleteSelfFromChatRequest()
    err623 := argvalue0.Read(context.Background(), jsProt622)
    if err623 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg624 := flag.Arg(1)
    mbTrans625 := thrift.NewTMemoryBufferLen(len(arg624))
    defer mbTrans625.Close()
    _, err626 := mbTrans625.WriteString(arg624)
    if err626 != nil {
      Usage()
      return
    }
    factory627 := thrift.NewTJSONProtocolFactory()
    jsProt628 := factory627.GetProtocol(mbTrans625)
    argvalue0 := talkservice.NewGetAllChatMidsRequest()
    err629 := argvalue0.Read(context.Background(), jsProt628)
    if err629 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg630 := flag.Arg(1)
    mbTrans631 := thrift.NewTMemoryBufferLen(len(arg630))
    defer mbTrans631.Close()
    _, err632 := mbTrans631.WriteString(arg630)
    if err632 != nil {
      Usage()
      return
    }
    factory633 := thrift.NewTJSONProtocolFactory()
    jsProt634 := factory633.GetProtocol(mbTrans631)
    argvalue0 := talkservice.NewCreateChatRequest()
    err635 := argvalue0.Read(context.Background(), jsProt634)
    if err635 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg636 := flag.Arg(1)
    mbTrans637 := thrift.NewTMemoryBufferLen(len(arg636))
    defer mbTrans637.Close()
    _, err638 := mbTrans637.WriteString(arg636)
    if err638 != nil {
      Usage()
      return
    }
    factory639 := thrift.NewTJSONProtocolFactory()
    jsProt640 := factory639.GetProtocol(mbTrans637)
    argvalue0 := talkservice.NewAcceptChatInvitationRequest()
    err641 := argvalue0.Read(context.Background(), jsProt640)
    if err641 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg642 := flag.Arg(1)
    mbTrans643 := thrift.NewTMemoryBufferLen(len(arg642))
    defer mbTrans643.Close()
    _, err644 := mbTrans643.WriteString(arg642)
    if err644 != nil {
      Usage()
      return
    }
    factory645 := thrift.NewTJSONProtocolFactory()
    jsProt646 := factory645.GetProtocol(mbTrans643)
    argvalue0 := talkservice.NewRejectChatInvitationRequest()
    err647 := argvalue0.Read(context.Background(), jsProt646)
    if err647 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg648 := flag.Arg(1)
    mbTrans649 := thrift.NewTMemoryBufferLen(len(arg648))
    defer mbTrans649.Close()
    _, err650 := mbTrans649.WriteString(arg648)
    if err650 != nil {
      Usage()
      return
    }
    factory651 := thrift.NewTJSONProtocolFactory()
    jsProt652 := factory651.GetProtocol(mbTrans649)
    argvalue0 := talkservice.NewDeleteOtherFromChatRequest()
    err653 := argvalue0.Read(context.Background(), jsProt652)
    if err653 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg654 := flag.Arg(1)
    mbTrans655 := thrift.NewTMemoryBufferLen(len(arg654))
    defer mbTrans655.Close()
    _, err656 := mbTrans655.WriteString(arg654)
    if err656 != nil {
      Usage()
      return
    }
    factory657 := thrift.NewTJSONProtocolFactory()
    jsProt658 := factory657.GetProtocol(mbTrans655)
    argvalue0 := talkservice.NewCancelChatInvitationRequest()
    err659 := argvalue0.Read(context.Background(), jsProt658)
    if err659 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSessions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSessions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSessions(context.Background()))
    fmt.Print("\n")
    break
  case "logoutSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LogoutSession requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LogoutSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 4 args")
      flag.Usage()
    }
    argvalue0, err661 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err661 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg662 := flag.Arg(2)
    mbTrans663 := thrift.NewTMemoryBufferLen(len(arg662))
    defer mbTrans663.Close()
    _, err664 := mbTrans663.WriteString(arg662)
    if err664 != nil {
      Usage()
      return
    }
    factory665 := thrift.NewTJSONProtocolFactory()
    jsProt666 := factory665.GetProtocol(mbTrans663)
    argvalue1 := talkservice.NewDeviceInfo()
    err667 := argvalue1.Read(context.Background(), jsProt666)
    if err667 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendEchoPush":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendEchoPush requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendEchoPush(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerE2EEPublicKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEPublicKey requires 2 args")
      flag.Usage()
    }
    tmp0, err672 := (strconv.Atoi(flag.Arg(1)))
    if err672 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg673 := flag.Arg(2)
    mbTrans674 := thrift.NewTMemoryBufferLen(len(arg673))
    defer mbTrans674.Close()
    _, err675 := mbTrans674.WriteString(arg673)
    if err675 != nil {
      Usage()
      return
    }
    factory676 := thrift.NewTJSONProtocolFactory()
    jsProt677 := factory676.GetProtocol(mbTrans674)
    argvalue1 := talkservice.NewE2EEPublicKey()
    err678 := argvalue1.Read(context.Background(), jsProt677)
    if err678 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterE2EEPublicKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err680 := (strconv.Atoi(flag.Arg(2)))
    if err680 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err681 := (strconv.Atoi(flag.Arg(3)))
    if err681 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "negotiateE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NegotiateE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.NegotiateE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerE2EEGroupKey":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEGroupKey requires 5 args")
      flag.Usage()
    }
    tmp0, err683 := (strconv.Atoi(flag.Arg(1)))
    if err683 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg685 := flag.Arg(3)
    mbTrans686 := thrift.NewTMemoryBufferLen(len(arg685))
    defer mbTrans686.Close()
    _, err687 := mbTrans686.WriteString(arg685)
    if err687 != nil { 
      Usage()
      return
    }
    factory688 := thrift.NewTJSONProtocolFactory()
    jsProt689 := factory688.GetProtocol(mbTrans686)
    containerStruct2 := talkservice.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err690 := containerStruct2.ReadField3(context.Background(), jsProt689)
    if err690 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Members
    value2 := argvalue2
    arg691 := flag.Arg(4)
    mbTrans692 := thrift.NewTMemoryBufferLen(len(arg691))
    defer mbTrans692.Close()
    _, err693 := mbTrans692.WriteString(arg691)
    if err693 != nil { 
      Usage()
      return
    }
    factory694 := thrift.NewTJSONProtocolFactory()
    jsProt695 := factory694.GetProtocol(mbTrans692)
    containerStruct3 := talkservice.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err696 := containerStruct3.ReadField4(context.Background(), jsProt695)
    if err696 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.KeyIds
    value3 := argvalue3
    arg697 := flag.Arg(5)
    mbTrans698 := thrift.NewTMemoryBufferLen(len(arg697))
    defer mbTrans698.Close()
    _, err699 := mbTrans698.WriteString(arg697)
    if err699 != nil { 
      Usage()
      return
    }
    factory700 := thrift.NewTJSONProtocolFactory()
    jsProt701 := factory700.GetProtocol(mbTrans698)
    containerStruct4 := talkservice.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err702 := containerStruct4.ReadField5(context.Background(), jsProt701)
    if err702 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.EncryptedSharedKeys
    value4 := argvalue4
    fmt.Print(client.RegisterE2EEGroupKey(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getE2EEGroupSharedKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
      flag.Usage()
    }
    tmp0, err703 := (strconv.Atoi(flag.Arg(1)))
    if err703 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err705 := (strconv.Atoi(flag.Arg(3)))
    if err705 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
