// Code generated by Thrift Compiler (0.18.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"primaryaccountinitservice"
)

var _ = primaryaccountinitservice.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string openSession(OpenSessionRequest request)")
  fmt.Fprintln(os.Stderr, "  GetAcctVerifMethodResponse getAcctVerifMethod(string authSessionId, AccountIdentifier accountIdentifier)")
  fmt.Fprintln(os.Stderr, "  RegisterPrimaryResponse registerPrimaryUsingPhone(string authSessionId)")
  fmt.Fprintln(os.Stderr, "  MigratePrimaryResponse migratePrimaryUsingPhone(string authSessionId)")
  fmt.Fprintln(os.Stderr, "  GetPhoneVerifMethodResponse getPhoneVerifMethod(string authSessionId, Device device, UserPhoneNumber userPhoneNumber)")
  fmt.Fprintln(os.Stderr, "  VerifyPhoneResponse verifyPhone(string authSessionId, Device device, UserPhoneNumber userPhoneNumber, string pinCode)")
  fmt.Fprintln(os.Stderr, "  VerifyAccountUsingPwdResponse verifyAccountUsingPwd(string authSessionId, AccountIdentifier accountIdentifier, EncryptedPassword encryptedPassword)")
  fmt.Fprintln(os.Stderr, "  ValidateProfileResponse validateProfile(string authSessionId, string displayName)")
  fmt.Fprintln(os.Stderr, "  GetUserProfileResponse getUserProfile(string authSessionId, AccountIdentifier accountIdentifier)")
  fmt.Fprintln(os.Stderr, "  IssueWebAuthDetailsForAcctVerifResponse issueWebAuthDetailsForAcctVerif(string authSessionId, AccountIdentifier accountIdentifier)")
  fmt.Fprintln(os.Stderr, "  IssueWebAuthDetailsForSecondAuthResponse issueWebAuthDetailsForSecondAuth(string authSessionId)")
  fmt.Fprintln(os.Stderr, "  ExchangeEncryptionKeyResponse exchangeEncryptionKey(string authSessionId, ExchangeEncryptionKeyRequest request)")
  fmt.Fprintln(os.Stderr, "  SetPasswordResponse setPassword(string authSessionId, EncryptedPassword encryptedPassword)")
  fmt.Fprintln(os.Stderr, "  SendPinCodeForPhoneResponse sendPinCodeForPhone(string authSessionId, Device device, UserPhoneNumber userPhoneNumber, PhoneVerifMethod verifMethod)")
  fmt.Fprintln(os.Stderr, "  GetSecondAuthMethodResponse getSecondAuthMethod(string authSessionId)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := primaryaccountinitservice.NewPrimaryAccountInitServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "openSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenSession requires 1 args")
      flag.Usage()
    }
    arg98 := flag.Arg(1)
    mbTrans99 := thrift.NewTMemoryBufferLen(len(arg98))
    defer mbTrans99.Close()
    _, err100 := mbTrans99.WriteString(arg98)
    if err100 != nil {
      Usage()
      return
    }
    factory101 := thrift.NewTJSONProtocolFactory()
    jsProt102 := factory101.GetProtocol(mbTrans99)
    argvalue0 := primaryaccountinitservice.NewOpenSessionRequest()
    err103 := argvalue0.Read(context.Background(), jsProt102)
    if err103 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAcctVerifMethod":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAcctVerifMethod requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg105 := flag.Arg(2)
    mbTrans106 := thrift.NewTMemoryBufferLen(len(arg105))
    defer mbTrans106.Close()
    _, err107 := mbTrans106.WriteString(arg105)
    if err107 != nil {
      Usage()
      return
    }
    factory108 := thrift.NewTJSONProtocolFactory()
    jsProt109 := factory108.GetProtocol(mbTrans106)
    argvalue1 := primaryaccountinitservice.NewAccountIdentifier()
    err110 := argvalue1.Read(context.Background(), jsProt109)
    if err110 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetAcctVerifMethod(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerPrimaryUsingPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterPrimaryUsingPhone requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RegisterPrimaryUsingPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "migratePrimaryUsingPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MigratePrimaryUsingPhone requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.MigratePrimaryUsingPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPhoneVerifMethod":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPhoneVerifMethod requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg114 := flag.Arg(2)
    mbTrans115 := thrift.NewTMemoryBufferLen(len(arg114))
    defer mbTrans115.Close()
    _, err116 := mbTrans115.WriteString(arg114)
    if err116 != nil {
      Usage()
      return
    }
    factory117 := thrift.NewTJSONProtocolFactory()
    jsProt118 := factory117.GetProtocol(mbTrans115)
    argvalue1 := primaryaccountinitservice.NewDevice()
    err119 := argvalue1.Read(context.Background(), jsProt118)
    if err119 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg120 := flag.Arg(3)
    mbTrans121 := thrift.NewTMemoryBufferLen(len(arg120))
    defer mbTrans121.Close()
    _, err122 := mbTrans121.WriteString(arg120)
    if err122 != nil {
      Usage()
      return
    }
    factory123 := thrift.NewTJSONProtocolFactory()
    jsProt124 := factory123.GetProtocol(mbTrans121)
    argvalue2 := primaryaccountinitservice.NewUserPhoneNumber()
    err125 := argvalue2.Read(context.Background(), jsProt124)
    if err125 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetPhoneVerifMethod(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyPhone":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "VerifyPhone requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg127 := flag.Arg(2)
    mbTrans128 := thrift.NewTMemoryBufferLen(len(arg127))
    defer mbTrans128.Close()
    _, err129 := mbTrans128.WriteString(arg127)
    if err129 != nil {
      Usage()
      return
    }
    factory130 := thrift.NewTJSONProtocolFactory()
    jsProt131 := factory130.GetProtocol(mbTrans128)
    argvalue1 := primaryaccountinitservice.NewDevice()
    err132 := argvalue1.Read(context.Background(), jsProt131)
    if err132 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg133 := flag.Arg(3)
    mbTrans134 := thrift.NewTMemoryBufferLen(len(arg133))
    defer mbTrans134.Close()
    _, err135 := mbTrans134.WriteString(arg133)
    if err135 != nil {
      Usage()
      return
    }
    factory136 := thrift.NewTJSONProtocolFactory()
    jsProt137 := factory136.GetProtocol(mbTrans134)
    argvalue2 := primaryaccountinitservice.NewUserPhoneNumber()
    err138 := argvalue2.Read(context.Background(), jsProt137)
    if err138 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.VerifyPhone(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "verifyAccountUsingPwd":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyAccountUsingPwd requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg141 := flag.Arg(2)
    mbTrans142 := thrift.NewTMemoryBufferLen(len(arg141))
    defer mbTrans142.Close()
    _, err143 := mbTrans142.WriteString(arg141)
    if err143 != nil {
      Usage()
      return
    }
    factory144 := thrift.NewTJSONProtocolFactory()
    jsProt145 := factory144.GetProtocol(mbTrans142)
    argvalue1 := primaryaccountinitservice.NewAccountIdentifier()
    err146 := argvalue1.Read(context.Background(), jsProt145)
    if err146 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg147 := flag.Arg(3)
    mbTrans148 := thrift.NewTMemoryBufferLen(len(arg147))
    defer mbTrans148.Close()
    _, err149 := mbTrans148.WriteString(arg147)
    if err149 != nil {
      Usage()
      return
    }
    factory150 := thrift.NewTJSONProtocolFactory()
    jsProt151 := factory150.GetProtocol(mbTrans148)
    argvalue2 := primaryaccountinitservice.NewEncryptedPassword()
    err152 := argvalue2.Read(context.Background(), jsProt151)
    if err152 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.VerifyAccountUsingPwd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "validateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ValidateProfile requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ValidateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUserProfile requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg156 := flag.Arg(2)
    mbTrans157 := thrift.NewTMemoryBufferLen(len(arg156))
    defer mbTrans157.Close()
    _, err158 := mbTrans157.WriteString(arg156)
    if err158 != nil {
      Usage()
      return
    }
    factory159 := thrift.NewTJSONProtocolFactory()
    jsProt160 := factory159.GetProtocol(mbTrans157)
    argvalue1 := primaryaccountinitservice.NewAccountIdentifier()
    err161 := argvalue1.Read(context.Background(), jsProt160)
    if err161 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetUserProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "issueWebAuthDetailsForAcctVerif":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IssueWebAuthDetailsForAcctVerif requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg163 := flag.Arg(2)
    mbTrans164 := thrift.NewTMemoryBufferLen(len(arg163))
    defer mbTrans164.Close()
    _, err165 := mbTrans164.WriteString(arg163)
    if err165 != nil {
      Usage()
      return
    }
    factory166 := thrift.NewTJSONProtocolFactory()
    jsProt167 := factory166.GetProtocol(mbTrans164)
    argvalue1 := primaryaccountinitservice.NewAccountIdentifier()
    err168 := argvalue1.Read(context.Background(), jsProt167)
    if err168 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.IssueWebAuthDetailsForAcctVerif(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "issueWebAuthDetailsForSecondAuth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueWebAuthDetailsForSecondAuth requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IssueWebAuthDetailsForSecondAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exchangeEncryptionKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExchangeEncryptionKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg171 := flag.Arg(2)
    mbTrans172 := thrift.NewTMemoryBufferLen(len(arg171))
    defer mbTrans172.Close()
    _, err173 := mbTrans172.WriteString(arg171)
    if err173 != nil {
      Usage()
      return
    }
    factory174 := thrift.NewTJSONProtocolFactory()
    jsProt175 := factory174.GetProtocol(mbTrans172)
    argvalue1 := primaryaccountinitservice.NewExchangeEncryptionKeyRequest()
    err176 := argvalue1.Read(context.Background(), jsProt175)
    if err176 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExchangeEncryptionKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setPassword":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPassword requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg178 := flag.Arg(2)
    mbTrans179 := thrift.NewTMemoryBufferLen(len(arg178))
    defer mbTrans179.Close()
    _, err180 := mbTrans179.WriteString(arg178)
    if err180 != nil {
      Usage()
      return
    }
    factory181 := thrift.NewTJSONProtocolFactory()
    jsProt182 := factory181.GetProtocol(mbTrans179)
    argvalue1 := primaryaccountinitservice.NewEncryptedPassword()
    err183 := argvalue1.Read(context.Background(), jsProt182)
    if err183 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetPassword(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendPinCodeForPhone":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendPinCodeForPhone requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg185 := flag.Arg(2)
    mbTrans186 := thrift.NewTMemoryBufferLen(len(arg185))
    defer mbTrans186.Close()
    _, err187 := mbTrans186.WriteString(arg185)
    if err187 != nil {
      Usage()
      return
    }
    factory188 := thrift.NewTJSONProtocolFactory()
    jsProt189 := factory188.GetProtocol(mbTrans186)
    argvalue1 := primaryaccountinitservice.NewDevice()
    err190 := argvalue1.Read(context.Background(), jsProt189)
    if err190 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg191 := flag.Arg(3)
    mbTrans192 := thrift.NewTMemoryBufferLen(len(arg191))
    defer mbTrans192.Close()
    _, err193 := mbTrans192.WriteString(arg191)
    if err193 != nil {
      Usage()
      return
    }
    factory194 := thrift.NewTJSONProtocolFactory()
    jsProt195 := factory194.GetProtocol(mbTrans192)
    argvalue2 := primaryaccountinitservice.NewUserPhoneNumber()
    err196 := argvalue2.Read(context.Background(), jsProt195)
    if err196 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := primaryaccountinitservice.PhoneVerifMethod(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendPinCodeForPhone(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getSecondAuthMethod":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSecondAuthMethod requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSecondAuthMethod(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
