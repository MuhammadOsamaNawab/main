// Code generated by Thrift Compiler (0.18.0). DO NOT EDIT.

package primaryaccountinitservice

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type ErrorCode int64
const (
  ErrorCode_INTERNAL_ERROR ErrorCode = 0
  ErrorCode_ILLEGAL_ARGUMENT ErrorCode = 1
  ErrorCode_VERIFICATION_FAILED ErrorCode = 2
  ErrorCode_NOT_FOUND ErrorCode = 3
  ErrorCode_RETRY_LATER ErrorCode = 4
  ErrorCode_HUMAN_VERIFICATION_REQUIRED ErrorCode = 5
  ErrorCode_INVALID_CONTEXT ErrorCode = 100
  ErrorCode_APP_UPGRADE_REQUIRED ErrorCode = 101
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case ErrorCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ErrorCode_VERIFICATION_FAILED: return "VERIFICATION_FAILED"
  case ErrorCode_NOT_FOUND: return "NOT_FOUND"
  case ErrorCode_RETRY_LATER: return "RETRY_LATER"
  case ErrorCode_HUMAN_VERIFICATION_REQUIRED: return "HUMAN_VERIFICATION_REQUIRED"
  case ErrorCode_INVALID_CONTEXT: return "INVALID_CONTEXT"
  case ErrorCode_APP_UPGRADE_REQUIRED: return "APP_UPGRADE_REQUIRED"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "INTERNAL_ERROR": return ErrorCode_INTERNAL_ERROR, nil 
  case "ILLEGAL_ARGUMENT": return ErrorCode_ILLEGAL_ARGUMENT, nil 
  case "VERIFICATION_FAILED": return ErrorCode_VERIFICATION_FAILED, nil 
  case "NOT_FOUND": return ErrorCode_NOT_FOUND, nil 
  case "RETRY_LATER": return ErrorCode_RETRY_LATER, nil 
  case "HUMAN_VERIFICATION_REQUIRED": return ErrorCode_HUMAN_VERIFICATION_REQUIRED, nil 
  case "INVALID_CONTEXT": return ErrorCode_INVALID_CONTEXT, nil 
  case "APP_UPGRADE_REQUIRED": return ErrorCode_APP_UPGRADE_REQUIRED, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountVerifMethod int64
const (
  AccountVerifMethod_UNKNOWN AccountVerifMethod = 0
  AccountVerifMethod_SKIP AccountVerifMethod = 1
  AccountVerifMethod_PASSWORD AccountVerifMethod = 2
  AccountVerifMethod_WEB_BASED AccountVerifMethod = 3
)

func (p AccountVerifMethod) String() string {
  switch p {
  case AccountVerifMethod_UNKNOWN: return "UNKNOWN"
  case AccountVerifMethod_SKIP: return "SKIP"
  case AccountVerifMethod_PASSWORD: return "PASSWORD"
  case AccountVerifMethod_WEB_BASED: return "WEB_BASED"
  }
  return "<UNSET>"
}

func AccountVerifMethodFromString(s string) (AccountVerifMethod, error) {
  switch s {
  case "UNKNOWN": return AccountVerifMethod_UNKNOWN, nil 
  case "SKIP": return AccountVerifMethod_SKIP, nil 
  case "PASSWORD": return AccountVerifMethod_PASSWORD, nil 
  case "WEB_BASED": return AccountVerifMethod_WEB_BASED, nil 
  }
  return AccountVerifMethod(0), fmt.Errorf("not a valid AccountVerifMethod string")
}


func AccountVerifMethodPtr(v AccountVerifMethod) *AccountVerifMethod { return &v }

func (p AccountVerifMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountVerifMethod) UnmarshalText(text []byte) error {
q, err := AccountVerifMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountVerifMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountVerifMethod(v)
return nil
}

func (p * AccountVerifMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountIdentifierType int64
const (
  AccountIdentifierType_UNKNOWN AccountIdentifierType = 0
  AccountIdentifierType_PHONE_NUMBER AccountIdentifierType = 1
  AccountIdentifierType_EMAIL AccountIdentifierType = 2
)

func (p AccountIdentifierType) String() string {
  switch p {
  case AccountIdentifierType_UNKNOWN: return "UNKNOWN"
  case AccountIdentifierType_PHONE_NUMBER: return "PHONE_NUMBER"
  case AccountIdentifierType_EMAIL: return "EMAIL"
  }
  return "<UNSET>"
}

func AccountIdentifierTypeFromString(s string) (AccountIdentifierType, error) {
  switch s {
  case "UNKNOWN": return AccountIdentifierType_UNKNOWN, nil 
  case "PHONE_NUMBER": return AccountIdentifierType_PHONE_NUMBER, nil 
  case "EMAIL": return AccountIdentifierType_EMAIL, nil 
  }
  return AccountIdentifierType(0), fmt.Errorf("not a valid AccountIdentifierType string")
}


func AccountIdentifierTypePtr(v AccountIdentifierType) *AccountIdentifierType { return &v }

func (p AccountIdentifierType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountIdentifierType) UnmarshalText(text []byte) error {
q, err := AccountIdentifierTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountIdentifierType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountIdentifierType(v)
return nil
}

func (p * AccountIdentifierType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PhoneVerifMethod int64
const (
  PhoneVerifMethod_UNKNOWN PhoneVerifMethod = 0
  PhoneVerifMethod_UNAVAILABLE PhoneVerifMethod = 1
  PhoneVerifMethod_SMS PhoneVerifMethod = 2
  PhoneVerifMethod_TTS PhoneVerifMethod = 3
)

func (p PhoneVerifMethod) String() string {
  switch p {
  case PhoneVerifMethod_UNKNOWN: return "UNKNOWN"
  case PhoneVerifMethod_UNAVAILABLE: return "UNAVAILABLE"
  case PhoneVerifMethod_SMS: return "SMS"
  case PhoneVerifMethod_TTS: return "TTS"
  }
  return "<UNSET>"
}

func PhoneVerifMethodFromString(s string) (PhoneVerifMethod, error) {
  switch s {
  case "UNKNOWN": return PhoneVerifMethod_UNKNOWN, nil 
  case "UNAVAILABLE": return PhoneVerifMethod_UNAVAILABLE, nil 
  case "SMS": return PhoneVerifMethod_SMS, nil 
  case "TTS": return PhoneVerifMethod_TTS, nil 
  }
  return PhoneVerifMethod(0), fmt.Errorf("not a valid PhoneVerifMethod string")
}


func PhoneVerifMethodPtr(v PhoneVerifMethod) *PhoneVerifMethod { return &v }

func (p PhoneVerifMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PhoneVerifMethod) UnmarshalText(text []byte) error {
q, err := PhoneVerifMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PhoneVerifMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PhoneVerifMethod(v)
return nil
}

func (p * PhoneVerifMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EncryptionKeyVersion int64
const (
  EncryptionKeyVersion_UNKNOWN EncryptionKeyVersion = 0
  EncryptionKeyVersion_V1 EncryptionKeyVersion = 1
)

func (p EncryptionKeyVersion) String() string {
  switch p {
  case EncryptionKeyVersion_UNKNOWN: return "UNKNOWN"
  case EncryptionKeyVersion_V1: return "V1"
  }
  return "<UNSET>"
}

func EncryptionKeyVersionFromString(s string) (EncryptionKeyVersion, error) {
  switch s {
  case "UNKNOWN": return EncryptionKeyVersion_UNKNOWN, nil 
  case "V1": return EncryptionKeyVersion_V1, nil 
  }
  return EncryptionKeyVersion(0), fmt.Errorf("not a valid EncryptionKeyVersion string")
}


func EncryptionKeyVersionPtr(v EncryptionKeyVersion) *EncryptionKeyVersion { return &v }

func (p EncryptionKeyVersion) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EncryptionKeyVersion) UnmarshalText(text []byte) error {
q, err := EncryptionKeyVersionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EncryptionKeyVersion) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EncryptionKeyVersion(v)
return nil
}

func (p * EncryptionKeyVersion) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SecondAuthMethod int64
const (
  SecondAuthMethod_UNKNOWN SecondAuthMethod = 0
  SecondAuthMethod_SKIP SecondAuthMethod = 1
  SecondAuthMethod_WEB_BASED SecondAuthMethod = 2
)

func (p SecondAuthMethod) String() string {
  switch p {
  case SecondAuthMethod_UNKNOWN: return "UNKNOWN"
  case SecondAuthMethod_SKIP: return "SKIP"
  case SecondAuthMethod_WEB_BASED: return "WEB_BASED"
  }
  return "<UNSET>"
}

func SecondAuthMethodFromString(s string) (SecondAuthMethod, error) {
  switch s {
  case "UNKNOWN": return SecondAuthMethod_UNKNOWN, nil 
  case "SKIP": return SecondAuthMethod_SKIP, nil 
  case "WEB_BASED": return SecondAuthMethod_WEB_BASED, nil 
  }
  return SecondAuthMethod(0), fmt.Errorf("not a valid SecondAuthMethod string")
}


func SecondAuthMethodPtr(v SecondAuthMethod) *SecondAuthMethod { return &v }

func (p SecondAuthMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SecondAuthMethod) UnmarshalText(text []byte) error {
q, err := SecondAuthMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SecondAuthMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SecondAuthMethod(v)
return nil
}

func (p * SecondAuthMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Code
//  - AlertMessage
//  - WebAuthDetails
type AuthException struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  AlertMessage string `thrift:"alertMessage,2" db:"alertMessage" json:"alertMessage"`
  // unused fields # 3 to 10
  WebAuthDetails *WebAuthDetails `thrift:"webAuthDetails,11" db:"webAuthDetails" json:"webAuthDetails"`
}

func NewAuthException() *AuthException {
  return &AuthException{}
}


func (p *AuthException) GetCode() ErrorCode {
  return p.Code
}

func (p *AuthException) GetAlertMessage() string {
  return p.AlertMessage
}
var AuthException_WebAuthDetails_DEFAULT WebAuthDetails
func (p *AuthException) GetWebAuthDetails() WebAuthDetails {
  if !p.IsSetWebAuthDetails() {
    return AuthException_WebAuthDetails_DEFAULT
  }
return *p.WebAuthDetails
}
func (p *AuthException) IsSetWebAuthDetails() bool {
  return p.WebAuthDetails != nil
}

func (p *AuthException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *AuthException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AlertMessage = v
}
  return nil
}

func (p *AuthException)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.WebAuthDetails = &WebAuthDetails{}
  if err := p.WebAuthDetails.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WebAuthDetails), err)
  }
  return nil
}

func (p *AuthException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AuthException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AuthException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "alertMessage", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:alertMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AlertMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alertMessage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:alertMessage: ", p), err) }
  return err
}

func (p *AuthException) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "webAuthDetails", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:webAuthDetails: ", p), err) }
  if err := p.WebAuthDetails.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WebAuthDetails), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:webAuthDetails: ", p), err) }
  return err
}

func (p *AuthException) Equals(other *AuthException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.AlertMessage != other.AlertMessage { return false }
  if !p.WebAuthDetails.Equals(other.WebAuthDetails) { return false }
  return true
}

func (p *AuthException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthException(%+v)", *p)
}

func (p *AuthException) Error() string {
  return p.String()
}

func (AuthException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*AuthException)(nil)

func (p *AuthException) Validate() error {
  return nil
}
// Attributes:
//  - MetaData
type OpenSessionRequest struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
}

func NewOpenSessionRequest() *OpenSessionRequest {
  return &OpenSessionRequest{}
}


func (p *OpenSessionRequest) GetMetaData() map[string]string {
  return p.MetaData
}
func (p *OpenSessionRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OpenSessionRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.MetaData[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *OpenSessionRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OpenSessionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OpenSessionRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *OpenSessionRequest) Equals(other *OpenSessionRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src2 := other.MetaData[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *OpenSessionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OpenSessionRequest(%+v)", *p)
}

func (p *OpenSessionRequest) Validate() error {
  return nil
}
// Attributes:
//  - AvailableMethod
//  - SameAccountFromAuthFactor
type GetAcctVerifMethodResponse struct {
  AvailableMethod AccountVerifMethod `thrift:"availableMethod,1" db:"availableMethod" json:"availableMethod"`
  SameAccountFromAuthFactor bool `thrift:"sameAccountFromAuthFactor,2" db:"sameAccountFromAuthFactor" json:"sameAccountFromAuthFactor"`
}

func NewGetAcctVerifMethodResponse() *GetAcctVerifMethodResponse {
  return &GetAcctVerifMethodResponse{}
}


func (p *GetAcctVerifMethodResponse) GetAvailableMethod() AccountVerifMethod {
  return p.AvailableMethod
}

func (p *GetAcctVerifMethodResponse) GetSameAccountFromAuthFactor() bool {
  return p.SameAccountFromAuthFactor
}
func (p *GetAcctVerifMethodResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAcctVerifMethodResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AccountVerifMethod(v)
  p.AvailableMethod = temp
}
  return nil
}

func (p *GetAcctVerifMethodResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SameAccountFromAuthFactor = v
}
  return nil
}

func (p *GetAcctVerifMethodResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetAcctVerifMethodResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAcctVerifMethodResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "availableMethod", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:availableMethod: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AvailableMethod)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableMethod (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:availableMethod: ", p), err) }
  return err
}

func (p *GetAcctVerifMethodResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sameAccountFromAuthFactor", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sameAccountFromAuthFactor: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SameAccountFromAuthFactor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sameAccountFromAuthFactor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sameAccountFromAuthFactor: ", p), err) }
  return err
}

func (p *GetAcctVerifMethodResponse) Equals(other *GetAcctVerifMethodResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AvailableMethod != other.AvailableMethod { return false }
  if p.SameAccountFromAuthFactor != other.SameAccountFromAuthFactor { return false }
  return true
}

func (p *GetAcctVerifMethodResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAcctVerifMethodResponse(%+v)", *p)
}

func (p *GetAcctVerifMethodResponse) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - Identifier
//  - CountryCode
type AccountIdentifier struct {
  Type AccountIdentifierType `thrift:"type,1" db:"type" json:"type"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  // unused fields # 3 to 10
  CountryCode string `thrift:"countryCode,11" db:"countryCode" json:"countryCode"`
}

func NewAccountIdentifier() *AccountIdentifier {
  return &AccountIdentifier{}
}


func (p *AccountIdentifier) GetType() AccountIdentifierType {
  return p.Type
}

func (p *AccountIdentifier) GetIdentifier() string {
  return p.Identifier
}

func (p *AccountIdentifier) GetCountryCode() string {
  return p.CountryCode
}
func (p *AccountIdentifier) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountIdentifier)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AccountIdentifierType(v)
  p.Type = temp
}
  return nil
}

func (p *AccountIdentifier)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *AccountIdentifier)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *AccountIdentifier) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AccountIdentifier"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountIdentifier) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *AccountIdentifier) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *AccountIdentifier) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryCode", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:countryCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:countryCode: ", p), err) }
  return err
}

func (p *AccountIdentifier) Equals(other *AccountIdentifier) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Identifier != other.Identifier { return false }
  if p.CountryCode != other.CountryCode { return false }
  return true
}

func (p *AccountIdentifier) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountIdentifier(%+v)", *p)
}

func (p *AccountIdentifier) Validate() error {
  return nil
}
// Attributes:
//  - AuthToken
type RegisterPrimaryResponse struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
}

func NewRegisterPrimaryResponse() *RegisterPrimaryResponse {
  return &RegisterPrimaryResponse{}
}


func (p *RegisterPrimaryResponse) GetAuthToken() string {
  return p.AuthToken
}
func (p *RegisterPrimaryResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterPrimaryResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *RegisterPrimaryResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterPrimaryResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterPrimaryResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *RegisterPrimaryResponse) Equals(other *RegisterPrimaryResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthToken != other.AuthToken { return false }
  return true
}

func (p *RegisterPrimaryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterPrimaryResponse(%+v)", *p)
}

func (p *RegisterPrimaryResponse) Validate() error {
  return nil
}
// Attributes:
//  - AuthToken
type MigratePrimaryResponse struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
}

func NewMigratePrimaryResponse() *MigratePrimaryResponse {
  return &MigratePrimaryResponse{}
}


func (p *MigratePrimaryResponse) GetAuthToken() string {
  return p.AuthToken
}
func (p *MigratePrimaryResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MigratePrimaryResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *MigratePrimaryResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MigratePrimaryResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MigratePrimaryResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *MigratePrimaryResponse) Equals(other *MigratePrimaryResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthToken != other.AuthToken { return false }
  return true
}

func (p *MigratePrimaryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MigratePrimaryResponse(%+v)", *p)
}

func (p *MigratePrimaryResponse) Validate() error {
  return nil
}
// Attributes:
//  - AvailableMethods
//  - PrettifiedPhoneNumber
type GetPhoneVerifMethodResponse struct {
  AvailableMethods []PhoneVerifMethod `thrift:"availableMethods,1" db:"availableMethods" json:"availableMethods"`
  // unused field # 2
  PrettifiedPhoneNumber string `thrift:"prettifiedPhoneNumber,3" db:"prettifiedPhoneNumber" json:"prettifiedPhoneNumber"`
}

func NewGetPhoneVerifMethodResponse() *GetPhoneVerifMethodResponse {
  return &GetPhoneVerifMethodResponse{}
}


func (p *GetPhoneVerifMethodResponse) GetAvailableMethods() []PhoneVerifMethod {
  return p.AvailableMethods
}

func (p *GetPhoneVerifMethodResponse) GetPrettifiedPhoneNumber() string {
  return p.PrettifiedPhoneNumber
}
func (p *GetPhoneVerifMethodResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPhoneVerifMethodResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]PhoneVerifMethod, 0, size)
  p.AvailableMethods =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 PhoneVerifMethod
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := PhoneVerifMethod(v)
    _elem3 = temp
}
    p.AvailableMethods = append(p.AvailableMethods, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPhoneVerifMethodResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PrettifiedPhoneNumber = v
}
  return nil
}

func (p *GetPhoneVerifMethodResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetPhoneVerifMethodResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPhoneVerifMethodResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "availableMethods", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:availableMethods: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.AvailableMethods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AvailableMethods {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:availableMethods: ", p), err) }
  return err
}

func (p *GetPhoneVerifMethodResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "prettifiedPhoneNumber", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prettifiedPhoneNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrettifiedPhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prettifiedPhoneNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prettifiedPhoneNumber: ", p), err) }
  return err
}

func (p *GetPhoneVerifMethodResponse) Equals(other *GetPhoneVerifMethodResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.AvailableMethods) != len(other.AvailableMethods) { return false }
  for i, _tgt := range p.AvailableMethods {
    _src4 := other.AvailableMethods[i]
    if _tgt != _src4 { return false }
  }
  if p.PrettifiedPhoneNumber != other.PrettifiedPhoneNumber { return false }
  return true
}

func (p *GetPhoneVerifMethodResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPhoneVerifMethodResponse(%+v)", *p)
}

func (p *GetPhoneVerifMethodResponse) Validate() error {
  return nil
}
// Attributes:
//  - Udid
//  - DeviceModel
type Device struct {
  Udid string `thrift:"udid,1" db:"udid" json:"udid"`
  DeviceModel string `thrift:"deviceModel,2" db:"deviceModel" json:"deviceModel"`
}

func NewDevice() *Device {
  return &Device{}
}


func (p *Device) GetUdid() string {
  return p.Udid
}

func (p *Device) GetDeviceModel() string {
  return p.DeviceModel
}
func (p *Device) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Device)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Udid = v
}
  return nil
}

func (p *Device)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceModel = v
}
  return nil
}

func (p *Device) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Device"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Device) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:udid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Udid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:udid: ", p), err) }
  return err
}

func (p *Device) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceModel", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceModel: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceModel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceModel (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceModel: ", p), err) }
  return err
}

func (p *Device) Equals(other *Device) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Udid != other.Udid { return false }
  if p.DeviceModel != other.DeviceModel { return false }
  return true
}

func (p *Device) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Device(%+v)", *p)
}

func (p *Device) Validate() error {
  return nil
}
// Attributes:
//  - PhoneNumber
//  - CountryCode
type UserPhoneNumber struct {
  PhoneNumber string `thrift:"phoneNumber,1" db:"phoneNumber" json:"phoneNumber"`
  CountryCode string `thrift:"countryCode,2" db:"countryCode" json:"countryCode"`
}

func NewUserPhoneNumber() *UserPhoneNumber {
  return &UserPhoneNumber{}
}


func (p *UserPhoneNumber) GetPhoneNumber() string {
  return p.PhoneNumber
}

func (p *UserPhoneNumber) GetCountryCode() string {
  return p.CountryCode
}
func (p *UserPhoneNumber) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserPhoneNumber)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PhoneNumber = v
}
  return nil
}

func (p *UserPhoneNumber)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *UserPhoneNumber) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserPhoneNumber"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserPhoneNumber) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumber", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumber: ", p), err) }
  return err
}

func (p *UserPhoneNumber) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:countryCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:countryCode: ", p), err) }
  return err
}

func (p *UserPhoneNumber) Equals(other *UserPhoneNumber) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PhoneNumber != other.PhoneNumber { return false }
  if p.CountryCode != other.CountryCode { return false }
  return true
}

func (p *UserPhoneNumber) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserPhoneNumber(%+v)", *p)
}

func (p *UserPhoneNumber) Validate() error {
  return nil
}
// Attributes:
//  - DisplayName
//  - ProfileImageUrl
type UserProfile struct {
  DisplayName string `thrift:"displayName,1" db:"displayName" json:"displayName"`
  ProfileImageUrl string `thrift:"profileImageUrl,2" db:"profileImageUrl" json:"profileImageUrl"`
}

func NewUserProfile() *UserProfile {
  return &UserProfile{}
}


func (p *UserProfile) GetDisplayName() string {
  return p.DisplayName
}

func (p *UserProfile) GetProfileImageUrl() string {
  return p.ProfileImageUrl
}
func (p *UserProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserProfile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *UserProfile)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProfileImageUrl = v
}
  return nil
}

func (p *UserProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayName: ", p), err) }
  return err
}

func (p *UserProfile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "profileImageUrl", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:profileImageUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ProfileImageUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.profileImageUrl (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:profileImageUrl: ", p), err) }
  return err
}

func (p *UserProfile) Equals(other *UserProfile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DisplayName != other.DisplayName { return false }
  if p.ProfileImageUrl != other.ProfileImageUrl { return false }
  return true
}

func (p *UserProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserProfile(%+v)", *p)
}

func (p *UserProfile) Validate() error {
  return nil
}
// Attributes:
//  - AccountExist
//  - SameUdidFromAccount
//  - UserProfile
type VerifyPhoneResponse struct {
  // unused field # 1
  AccountExist bool `thrift:"accountExist,2" db:"accountExist" json:"accountExist"`
  SameUdidFromAccount bool `thrift:"sameUdidFromAccount,3" db:"sameUdidFromAccount" json:"sameUdidFromAccount"`
  // unused fields # 4 to 10
  UserProfile *UserProfile `thrift:"userProfile,11" db:"userProfile" json:"userProfile"`
}

func NewVerifyPhoneResponse() *VerifyPhoneResponse {
  return &VerifyPhoneResponse{}
}


func (p *VerifyPhoneResponse) GetAccountExist() bool {
  return p.AccountExist
}

func (p *VerifyPhoneResponse) GetSameUdidFromAccount() bool {
  return p.SameUdidFromAccount
}
var VerifyPhoneResponse_UserProfile_DEFAULT *UserProfile
func (p *VerifyPhoneResponse) GetUserProfile() *UserProfile {
  if !p.IsSetUserProfile() {
    return VerifyPhoneResponse_UserProfile_DEFAULT
  }
return p.UserProfile
}
func (p *VerifyPhoneResponse) IsSetUserProfile() bool {
  return p.UserProfile != nil
}

func (p *VerifyPhoneResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyPhoneResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountExist = v
}
  return nil
}

func (p *VerifyPhoneResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SameUdidFromAccount = v
}
  return nil
}

func (p *VerifyPhoneResponse)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.UserProfile = &UserProfile{}
  if err := p.UserProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserProfile), err)
  }
  return nil
}

func (p *VerifyPhoneResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyPhoneResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyPhoneResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountExist", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountExist: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AccountExist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountExist (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountExist: ", p), err) }
  return err
}

func (p *VerifyPhoneResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sameUdidFromAccount", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sameUdidFromAccount: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SameUdidFromAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sameUdidFromAccount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sameUdidFromAccount: ", p), err) }
  return err
}

func (p *VerifyPhoneResponse) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userProfile", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:userProfile: ", p), err) }
  if err := p.UserProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:userProfile: ", p), err) }
  return err
}

func (p *VerifyPhoneResponse) Equals(other *VerifyPhoneResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AccountExist != other.AccountExist { return false }
  if p.SameUdidFromAccount != other.SameUdidFromAccount { return false }
  if !p.UserProfile.Equals(other.UserProfile) { return false }
  return true
}

func (p *VerifyPhoneResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyPhoneResponse(%+v)", *p)
}

func (p *VerifyPhoneResponse) Validate() error {
  return nil
}
// Attributes:
//  - UserProfile
type VerifyAccountUsingPwdResponse struct {
  // unused field # 1
  UserProfile *UserProfile `thrift:"userProfile,2" db:"userProfile" json:"userProfile"`
}

func NewVerifyAccountUsingPwdResponse() *VerifyAccountUsingPwdResponse {
  return &VerifyAccountUsingPwdResponse{}
}

var VerifyAccountUsingPwdResponse_UserProfile_DEFAULT *UserProfile
func (p *VerifyAccountUsingPwdResponse) GetUserProfile() *UserProfile {
  if !p.IsSetUserProfile() {
    return VerifyAccountUsingPwdResponse_UserProfile_DEFAULT
  }
return p.UserProfile
}
func (p *VerifyAccountUsingPwdResponse) IsSetUserProfile() bool {
  return p.UserProfile != nil
}

func (p *VerifyAccountUsingPwdResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyAccountUsingPwdResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.UserProfile = &UserProfile{}
  if err := p.UserProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserProfile), err)
  }
  return nil
}

func (p *VerifyAccountUsingPwdResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyAccountUsingPwdResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyAccountUsingPwdResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userProfile", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userProfile: ", p), err) }
  if err := p.UserProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userProfile: ", p), err) }
  return err
}

func (p *VerifyAccountUsingPwdResponse) Equals(other *VerifyAccountUsingPwdResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.UserProfile.Equals(other.UserProfile) { return false }
  return true
}

func (p *VerifyAccountUsingPwdResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyAccountUsingPwdResponse(%+v)", *p)
}

func (p *VerifyAccountUsingPwdResponse) Validate() error {
  return nil
}
// Attributes:
//  - EncryptionKeyVersion
//  - CipherText
type EncryptedPassword struct {
  EncryptionKeyVersion EncryptionKeyVersion `thrift:"encryptionKeyVersion,1" db:"encryptionKeyVersion" json:"encryptionKeyVersion"`
  CipherText string `thrift:"cipherText,2" db:"cipherText" json:"cipherText"`
}

func NewEncryptedPassword() *EncryptedPassword {
  return &EncryptedPassword{}
}


func (p *EncryptedPassword) GetEncryptionKeyVersion() EncryptionKeyVersion {
  return p.EncryptionKeyVersion
}

func (p *EncryptedPassword) GetCipherText() string {
  return p.CipherText
}
func (p *EncryptedPassword) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EncryptedPassword)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := EncryptionKeyVersion(v)
  p.EncryptionKeyVersion = temp
}
  return nil
}

func (p *EncryptedPassword)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CipherText = v
}
  return nil
}

func (p *EncryptedPassword) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EncryptedPassword"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EncryptedPassword) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptionKeyVersion", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:encryptionKeyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EncryptionKeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptionKeyVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:encryptionKeyVersion: ", p), err) }
  return err
}

func (p *EncryptedPassword) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cipherText", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cipherText: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CipherText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cipherText (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cipherText: ", p), err) }
  return err
}

func (p *EncryptedPassword) Equals(other *EncryptedPassword) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EncryptionKeyVersion != other.EncryptionKeyVersion { return false }
  if p.CipherText != other.CipherText { return false }
  return true
}

func (p *EncryptedPassword) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EncryptedPassword(%+v)", *p)
}

func (p *EncryptedPassword) Validate() error {
  return nil
}
type ValidateProfileResponse struct {
}

func NewValidateProfileResponse() *ValidateProfileResponse {
  return &ValidateProfileResponse{}
}

func (p *ValidateProfileResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ValidateProfileResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ValidateProfileResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ValidateProfileResponse) Equals(other *ValidateProfileResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ValidateProfileResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ValidateProfileResponse(%+v)", *p)
}

func (p *ValidateProfileResponse) Validate() error {
  return nil
}
// Attributes:
//  - UserProfile
type GetUserProfileResponse struct {
  UserProfile *UserProfile `thrift:"userProfile,1" db:"userProfile" json:"userProfile"`
}

func NewGetUserProfileResponse() *GetUserProfileResponse {
  return &GetUserProfileResponse{}
}

var GetUserProfileResponse_UserProfile_DEFAULT *UserProfile
func (p *GetUserProfileResponse) GetUserProfile() *UserProfile {
  if !p.IsSetUserProfile() {
    return GetUserProfileResponse_UserProfile_DEFAULT
  }
return p.UserProfile
}
func (p *GetUserProfileResponse) IsSetUserProfile() bool {
  return p.UserProfile != nil
}

func (p *GetUserProfileResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserProfileResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.UserProfile = &UserProfile{}
  if err := p.UserProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserProfile), err)
  }
  return nil
}

func (p *GetUserProfileResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetUserProfileResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserProfileResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userProfile", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userProfile: ", p), err) }
  if err := p.UserProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userProfile: ", p), err) }
  return err
}

func (p *GetUserProfileResponse) Equals(other *GetUserProfileResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.UserProfile.Equals(other.UserProfile) { return false }
  return true
}

func (p *GetUserProfileResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserProfileResponse(%+v)", *p)
}

func (p *GetUserProfileResponse) Validate() error {
  return nil
}
// Attributes:
//  - BaseUrl
//  - Token
type WebAuthDetails struct {
  BaseUrl string `thrift:"baseUrl,1" db:"baseUrl" json:"baseUrl"`
  Token string `thrift:"token,2" db:"token" json:"token"`
}

func NewWebAuthDetails() *WebAuthDetails {
  return &WebAuthDetails{}
}


func (p *WebAuthDetails) GetBaseUrl() string {
  return p.BaseUrl
}

func (p *WebAuthDetails) GetToken() string {
  return p.Token
}
func (p *WebAuthDetails) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WebAuthDetails)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BaseUrl = v
}
  return nil
}

func (p *WebAuthDetails)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *WebAuthDetails) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WebAuthDetails"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WebAuthDetails) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "baseUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:baseUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BaseUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.baseUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:baseUrl: ", p), err) }
  return err
}

func (p *WebAuthDetails) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *WebAuthDetails) Equals(other *WebAuthDetails) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.BaseUrl != other.BaseUrl { return false }
  if p.Token != other.Token { return false }
  return true
}

func (p *WebAuthDetails) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WebAuthDetails(%+v)", *p)
}

func (p *WebAuthDetails) Validate() error {
  return nil
}
// Attributes:
//  - WebAuthDetails
type IssueWebAuthDetailsForAcctVerifResponse struct {
  WebAuthDetails *WebAuthDetails `thrift:"webAuthDetails,1" db:"webAuthDetails" json:"webAuthDetails"`
}

func NewIssueWebAuthDetailsForAcctVerifResponse() *IssueWebAuthDetailsForAcctVerifResponse {
  return &IssueWebAuthDetailsForAcctVerifResponse{}
}

var IssueWebAuthDetailsForAcctVerifResponse_WebAuthDetails_DEFAULT *WebAuthDetails
func (p *IssueWebAuthDetailsForAcctVerifResponse) GetWebAuthDetails() *WebAuthDetails {
  if !p.IsSetWebAuthDetails() {
    return IssueWebAuthDetailsForAcctVerifResponse_WebAuthDetails_DEFAULT
  }
return p.WebAuthDetails
}
func (p *IssueWebAuthDetailsForAcctVerifResponse) IsSetWebAuthDetails() bool {
  return p.WebAuthDetails != nil
}

func (p *IssueWebAuthDetailsForAcctVerifResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IssueWebAuthDetailsForAcctVerifResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.WebAuthDetails = &WebAuthDetails{}
  if err := p.WebAuthDetails.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WebAuthDetails), err)
  }
  return nil
}

func (p *IssueWebAuthDetailsForAcctVerifResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IssueWebAuthDetailsForAcctVerifResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IssueWebAuthDetailsForAcctVerifResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "webAuthDetails", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:webAuthDetails: ", p), err) }
  if err := p.WebAuthDetails.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WebAuthDetails), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:webAuthDetails: ", p), err) }
  return err
}

func (p *IssueWebAuthDetailsForAcctVerifResponse) Equals(other *IssueWebAuthDetailsForAcctVerifResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.WebAuthDetails.Equals(other.WebAuthDetails) { return false }
  return true
}

func (p *IssueWebAuthDetailsForAcctVerifResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IssueWebAuthDetailsForAcctVerifResponse(%+v)", *p)
}

func (p *IssueWebAuthDetailsForAcctVerifResponse) Validate() error {
  return nil
}
// Attributes:
//  - WebAuthDetails
type IssueWebAuthDetailsForSecondAuthResponse struct {
  WebAuthDetails *WebAuthDetails `thrift:"webAuthDetails,1" db:"webAuthDetails" json:"webAuthDetails"`
}

func NewIssueWebAuthDetailsForSecondAuthResponse() *IssueWebAuthDetailsForSecondAuthResponse {
  return &IssueWebAuthDetailsForSecondAuthResponse{}
}

var IssueWebAuthDetailsForSecondAuthResponse_WebAuthDetails_DEFAULT *WebAuthDetails
func (p *IssueWebAuthDetailsForSecondAuthResponse) GetWebAuthDetails() *WebAuthDetails {
  if !p.IsSetWebAuthDetails() {
    return IssueWebAuthDetailsForSecondAuthResponse_WebAuthDetails_DEFAULT
  }
return p.WebAuthDetails
}
func (p *IssueWebAuthDetailsForSecondAuthResponse) IsSetWebAuthDetails() bool {
  return p.WebAuthDetails != nil
}

func (p *IssueWebAuthDetailsForSecondAuthResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IssueWebAuthDetailsForSecondAuthResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.WebAuthDetails = &WebAuthDetails{}
  if err := p.WebAuthDetails.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WebAuthDetails), err)
  }
  return nil
}

func (p *IssueWebAuthDetailsForSecondAuthResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IssueWebAuthDetailsForSecondAuthResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IssueWebAuthDetailsForSecondAuthResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "webAuthDetails", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:webAuthDetails: ", p), err) }
  if err := p.WebAuthDetails.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WebAuthDetails), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:webAuthDetails: ", p), err) }
  return err
}

func (p *IssueWebAuthDetailsForSecondAuthResponse) Equals(other *IssueWebAuthDetailsForSecondAuthResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.WebAuthDetails.Equals(other.WebAuthDetails) { return false }
  return true
}

func (p *IssueWebAuthDetailsForSecondAuthResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IssueWebAuthDetailsForSecondAuthResponse(%+v)", *p)
}

func (p *IssueWebAuthDetailsForSecondAuthResponse) Validate() error {
  return nil
}
// Attributes:
//  - PublicKey
//  - Nonce
type ExchangeEncryptionKeyResponse struct {
  PublicKey string `thrift:"publicKey,1" db:"publicKey" json:"publicKey"`
  Nonce string `thrift:"nonce,2" db:"nonce" json:"nonce"`
}

func NewExchangeEncryptionKeyResponse() *ExchangeEncryptionKeyResponse {
  return &ExchangeEncryptionKeyResponse{}
}


func (p *ExchangeEncryptionKeyResponse) GetPublicKey() string {
  return p.PublicKey
}

func (p *ExchangeEncryptionKeyResponse) GetNonce() string {
  return p.Nonce
}
func (p *ExchangeEncryptionKeyResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExchangeEncryptionKeyResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PublicKey = v
}
  return nil
}

func (p *ExchangeEncryptionKeyResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *ExchangeEncryptionKeyResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExchangeEncryptionKeyResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExchangeEncryptionKeyResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:publicKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PublicKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.publicKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:publicKey: ", p), err) }
  return err
}

func (p *ExchangeEncryptionKeyResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nonce", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nonce: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nonce: ", p), err) }
  return err
}

func (p *ExchangeEncryptionKeyResponse) Equals(other *ExchangeEncryptionKeyResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PublicKey != other.PublicKey { return false }
  if p.Nonce != other.Nonce { return false }
  return true
}

func (p *ExchangeEncryptionKeyResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExchangeEncryptionKeyResponse(%+v)", *p)
}

func (p *ExchangeEncryptionKeyResponse) Validate() error {
  return nil
}
// Attributes:
//  - AuthKeyVersion
//  - PublicKey
//  - Nonce
type ExchangeEncryptionKeyRequest struct {
  AuthKeyVersion EncryptionKeyVersion `thrift:"authKeyVersion,1" db:"authKeyVersion" json:"authKeyVersion"`
  PublicKey string `thrift:"publicKey,2" db:"publicKey" json:"publicKey"`
  Nonce string `thrift:"nonce,3" db:"nonce" json:"nonce"`
}

func NewExchangeEncryptionKeyRequest() *ExchangeEncryptionKeyRequest {
  return &ExchangeEncryptionKeyRequest{}
}


func (p *ExchangeEncryptionKeyRequest) GetAuthKeyVersion() EncryptionKeyVersion {
  return p.AuthKeyVersion
}

func (p *ExchangeEncryptionKeyRequest) GetPublicKey() string {
  return p.PublicKey
}

func (p *ExchangeEncryptionKeyRequest) GetNonce() string {
  return p.Nonce
}
func (p *ExchangeEncryptionKeyRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExchangeEncryptionKeyRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := EncryptionKeyVersion(v)
  p.AuthKeyVersion = temp
}
  return nil
}

func (p *ExchangeEncryptionKeyRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PublicKey = v
}
  return nil
}

func (p *ExchangeEncryptionKeyRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Nonce = v
}
  return nil
}

func (p *ExchangeEncryptionKeyRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExchangeEncryptionKeyRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExchangeEncryptionKeyRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authKeyVersion", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authKeyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AuthKeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authKeyVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authKeyVersion: ", p), err) }
  return err
}

func (p *ExchangeEncryptionKeyRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PublicKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.publicKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicKey: ", p), err) }
  return err
}

func (p *ExchangeEncryptionKeyRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nonce", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nonce: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Nonce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonce (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nonce: ", p), err) }
  return err
}

func (p *ExchangeEncryptionKeyRequest) Equals(other *ExchangeEncryptionKeyRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthKeyVersion != other.AuthKeyVersion { return false }
  if p.PublicKey != other.PublicKey { return false }
  if p.Nonce != other.Nonce { return false }
  return true
}

func (p *ExchangeEncryptionKeyRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExchangeEncryptionKeyRequest(%+v)", *p)
}

func (p *ExchangeEncryptionKeyRequest) Validate() error {
  return nil
}
type SetPasswordResponse struct {
}

func NewSetPasswordResponse() *SetPasswordResponse {
  return &SetPasswordResponse{}
}

func (p *SetPasswordResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetPasswordResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetPasswordResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetPasswordResponse) Equals(other *SetPasswordResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *SetPasswordResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetPasswordResponse(%+v)", *p)
}

func (p *SetPasswordResponse) Validate() error {
  return nil
}
// Attributes:
//  - AvailableMethods
type SendPinCodeForPhoneResponse struct {
  AvailableMethods []PhoneVerifMethod `thrift:"availableMethods,1" db:"availableMethods" json:"availableMethods"`
}

func NewSendPinCodeForPhoneResponse() *SendPinCodeForPhoneResponse {
  return &SendPinCodeForPhoneResponse{}
}


func (p *SendPinCodeForPhoneResponse) GetAvailableMethods() []PhoneVerifMethod {
  return p.AvailableMethods
}
func (p *SendPinCodeForPhoneResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendPinCodeForPhoneResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]PhoneVerifMethod, 0, size)
  p.AvailableMethods =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 PhoneVerifMethod
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := PhoneVerifMethod(v)
    _elem5 = temp
}
    p.AvailableMethods = append(p.AvailableMethods, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SendPinCodeForPhoneResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SendPinCodeForPhoneResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendPinCodeForPhoneResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "availableMethods", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:availableMethods: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.AvailableMethods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AvailableMethods {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:availableMethods: ", p), err) }
  return err
}

func (p *SendPinCodeForPhoneResponse) Equals(other *SendPinCodeForPhoneResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.AvailableMethods) != len(other.AvailableMethods) { return false }
  for i, _tgt := range p.AvailableMethods {
    _src6 := other.AvailableMethods[i]
    if _tgt != _src6 { return false }
  }
  return true
}

func (p *SendPinCodeForPhoneResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendPinCodeForPhoneResponse(%+v)", *p)
}

func (p *SendPinCodeForPhoneResponse) Validate() error {
  return nil
}
// Attributes:
//  - SecondAuthMethod
type GetSecondAuthMethodResponse struct {
  SecondAuthMethod SecondAuthMethod `thrift:"secondAuthMethod,1" db:"secondAuthMethod" json:"secondAuthMethod"`
}

func NewGetSecondAuthMethodResponse() *GetSecondAuthMethodResponse {
  return &GetSecondAuthMethodResponse{}
}


func (p *GetSecondAuthMethodResponse) GetSecondAuthMethod() SecondAuthMethod {
  return p.SecondAuthMethod
}
func (p *GetSecondAuthMethodResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSecondAuthMethodResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SecondAuthMethod(v)
  p.SecondAuthMethod = temp
}
  return nil
}

func (p *GetSecondAuthMethodResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetSecondAuthMethodResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSecondAuthMethodResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "secondAuthMethod", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:secondAuthMethod: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SecondAuthMethod)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secondAuthMethod (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:secondAuthMethod: ", p), err) }
  return err
}

func (p *GetSecondAuthMethodResponse) Equals(other *GetSecondAuthMethodResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SecondAuthMethod != other.SecondAuthMethod { return false }
  return true
}

func (p *GetSecondAuthMethodResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSecondAuthMethodResponse(%+v)", *p)
}

func (p *GetSecondAuthMethodResponse) Validate() error {
  return nil
}
type PrimaryAccountInitService interface {
  // Parameters:
  //  - Request
  OpenSession(ctx context.Context, request *OpenSessionRequest) (_r string, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - AccountIdentifier
  GetAcctVerifMethod(ctx context.Context, authSessionId string, accountIdentifier *AccountIdentifier) (_r *GetAcctVerifMethodResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  RegisterPrimaryUsingPhone(ctx context.Context, authSessionId string) (_r *RegisterPrimaryResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  MigratePrimaryUsingPhone(ctx context.Context, authSessionId string) (_r *MigratePrimaryResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Device
  //  - UserPhoneNumber
  GetPhoneVerifMethod(ctx context.Context, authSessionId string, device *Device, userPhoneNumber *UserPhoneNumber) (_r *GetPhoneVerifMethodResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Device
  //  - UserPhoneNumber
  //  - PinCode
  VerifyPhone(ctx context.Context, authSessionId string, device *Device, userPhoneNumber *UserPhoneNumber, pinCode string) (_r *VerifyPhoneResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - AccountIdentifier
  //  - EncryptedPassword
  VerifyAccountUsingPwd(ctx context.Context, authSessionId string, accountIdentifier *AccountIdentifier, encryptedPassword *EncryptedPassword) (_r *VerifyAccountUsingPwdResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - DisplayName
  ValidateProfile(ctx context.Context, authSessionId string, displayName string) (_r *ValidateProfileResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - AccountIdentifier
  GetUserProfile(ctx context.Context, authSessionId string, accountIdentifier *AccountIdentifier) (_r *GetUserProfileResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - AccountIdentifier
  IssueWebAuthDetailsForAcctVerif(ctx context.Context, authSessionId string, accountIdentifier *AccountIdentifier) (_r *IssueWebAuthDetailsForAcctVerifResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  IssueWebAuthDetailsForSecondAuth(ctx context.Context, authSessionId string) (_r *IssueWebAuthDetailsForSecondAuthResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  ExchangeEncryptionKey(ctx context.Context, authSessionId string, request *ExchangeEncryptionKeyRequest) (_r *ExchangeEncryptionKeyResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - EncryptedPassword
  SetPassword(ctx context.Context, authSessionId string, encryptedPassword *EncryptedPassword) (_r *SetPasswordResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Device
  //  - UserPhoneNumber
  //  - VerifMethod
  SendPinCodeForPhone(ctx context.Context, authSessionId string, device *Device, userPhoneNumber *UserPhoneNumber, verifMethod PhoneVerifMethod) (_r *SendPinCodeForPhoneResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  GetSecondAuthMethod(ctx context.Context, authSessionId string) (_r *GetSecondAuthMethodResponse, _err error)
}

type PrimaryAccountInitServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewPrimaryAccountInitServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PrimaryAccountInitServiceClient {
  return &PrimaryAccountInitServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPrimaryAccountInitServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PrimaryAccountInitServiceClient {
  return &PrimaryAccountInitServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPrimaryAccountInitServiceClient(c thrift.TClient) *PrimaryAccountInitServiceClient {
  return &PrimaryAccountInitServiceClient{
    c: c,
  }
}

func (p *PrimaryAccountInitServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *PrimaryAccountInitServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *PrimaryAccountInitServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Request
func (p *PrimaryAccountInitServiceClient) OpenSession(ctx context.Context, request *OpenSessionRequest) (_r string, _err error) {
  var _args7 PrimaryAccountInitServiceOpenSessionArgs
  _args7.Request = request
  var _result9 PrimaryAccountInitServiceOpenSessionResult
  var _meta8 thrift.ResponseMeta
  _meta8, _err = p.Client_().Call(ctx, "openSession", &_args7, &_result9)
  p.SetLastResponseMeta_(_meta8)
  if _err != nil {
    return
  }
  switch {
  case _result9.E!= nil:
    return _r, _result9.E
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - AccountIdentifier
func (p *PrimaryAccountInitServiceClient) GetAcctVerifMethod(ctx context.Context, authSessionId string, accountIdentifier *AccountIdentifier) (_r *GetAcctVerifMethodResponse, _err error) {
  var _args10 PrimaryAccountInitServiceGetAcctVerifMethodArgs
  _args10.AuthSessionId = authSessionId
  _args10.AccountIdentifier = accountIdentifier
  var _result12 PrimaryAccountInitServiceGetAcctVerifMethodResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "getAcctVerifMethod", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  switch {
  case _result12.E!= nil:
    return _r, _result12.E
  }

  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getAcctVerifMethod failed: unknown result")
}

// Parameters:
//  - AuthSessionId
func (p *PrimaryAccountInitServiceClient) RegisterPrimaryUsingPhone(ctx context.Context, authSessionId string) (_r *RegisterPrimaryResponse, _err error) {
  var _args14 PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs
  _args14.AuthSessionId = authSessionId
  var _result16 PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "registerPrimaryUsingPhone", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  switch {
  case _result16.E!= nil:
    return _r, _result16.E
  }

  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "registerPrimaryUsingPhone failed: unknown result")
}

// Parameters:
//  - AuthSessionId
func (p *PrimaryAccountInitServiceClient) MigratePrimaryUsingPhone(ctx context.Context, authSessionId string) (_r *MigratePrimaryResponse, _err error) {
  var _args18 PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs
  _args18.AuthSessionId = authSessionId
  var _result20 PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "migratePrimaryUsingPhone", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  switch {
  case _result20.E!= nil:
    return _r, _result20.E
  }

  if _ret21 := _result20.GetSuccess(); _ret21 != nil {
    return _ret21, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "migratePrimaryUsingPhone failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - Device
//  - UserPhoneNumber
func (p *PrimaryAccountInitServiceClient) GetPhoneVerifMethod(ctx context.Context, authSessionId string, device *Device, userPhoneNumber *UserPhoneNumber) (_r *GetPhoneVerifMethodResponse, _err error) {
  var _args22 PrimaryAccountInitServiceGetPhoneVerifMethodArgs
  _args22.AuthSessionId = authSessionId
  _args22.Device = device
  _args22.UserPhoneNumber = userPhoneNumber
  var _result24 PrimaryAccountInitServiceGetPhoneVerifMethodResult
  var _meta23 thrift.ResponseMeta
  _meta23, _err = p.Client_().Call(ctx, "getPhoneVerifMethod", &_args22, &_result24)
  p.SetLastResponseMeta_(_meta23)
  if _err != nil {
    return
  }
  switch {
  case _result24.E!= nil:
    return _r, _result24.E
  }

  if _ret25 := _result24.GetSuccess(); _ret25 != nil {
    return _ret25, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getPhoneVerifMethod failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - Device
//  - UserPhoneNumber
//  - PinCode
func (p *PrimaryAccountInitServiceClient) VerifyPhone(ctx context.Context, authSessionId string, device *Device, userPhoneNumber *UserPhoneNumber, pinCode string) (_r *VerifyPhoneResponse, _err error) {
  var _args26 PrimaryAccountInitServiceVerifyPhoneArgs
  _args26.AuthSessionId = authSessionId
  _args26.Device = device
  _args26.UserPhoneNumber = userPhoneNumber
  _args26.PinCode = pinCode
  var _result28 PrimaryAccountInitServiceVerifyPhoneResult
  var _meta27 thrift.ResponseMeta
  _meta27, _err = p.Client_().Call(ctx, "verifyPhone", &_args26, &_result28)
  p.SetLastResponseMeta_(_meta27)
  if _err != nil {
    return
  }
  switch {
  case _result28.E!= nil:
    return _r, _result28.E
  }

  if _ret29 := _result28.GetSuccess(); _ret29 != nil {
    return _ret29, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "verifyPhone failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - AccountIdentifier
//  - EncryptedPassword
func (p *PrimaryAccountInitServiceClient) VerifyAccountUsingPwd(ctx context.Context, authSessionId string, accountIdentifier *AccountIdentifier, encryptedPassword *EncryptedPassword) (_r *VerifyAccountUsingPwdResponse, _err error) {
  var _args30 PrimaryAccountInitServiceVerifyAccountUsingPwdArgs
  _args30.AuthSessionId = authSessionId
  _args30.AccountIdentifier = accountIdentifier
  _args30.EncryptedPassword = encryptedPassword
  var _result32 PrimaryAccountInitServiceVerifyAccountUsingPwdResult
  var _meta31 thrift.ResponseMeta
  _meta31, _err = p.Client_().Call(ctx, "verifyAccountUsingPwd", &_args30, &_result32)
  p.SetLastResponseMeta_(_meta31)
  if _err != nil {
    return
  }
  switch {
  case _result32.E!= nil:
    return _r, _result32.E
  }

  if _ret33 := _result32.GetSuccess(); _ret33 != nil {
    return _ret33, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "verifyAccountUsingPwd failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - DisplayName
func (p *PrimaryAccountInitServiceClient) ValidateProfile(ctx context.Context, authSessionId string, displayName string) (_r *ValidateProfileResponse, _err error) {
  var _args34 PrimaryAccountInitServiceValidateProfileArgs
  _args34.AuthSessionId = authSessionId
  _args34.DisplayName = displayName
  var _result36 PrimaryAccountInitServiceValidateProfileResult
  var _meta35 thrift.ResponseMeta
  _meta35, _err = p.Client_().Call(ctx, "validateProfile", &_args34, &_result36)
  p.SetLastResponseMeta_(_meta35)
  if _err != nil {
    return
  }
  switch {
  case _result36.E!= nil:
    return _r, _result36.E
  }

  if _ret37 := _result36.GetSuccess(); _ret37 != nil {
    return _ret37, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "validateProfile failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - AccountIdentifier
func (p *PrimaryAccountInitServiceClient) GetUserProfile(ctx context.Context, authSessionId string, accountIdentifier *AccountIdentifier) (_r *GetUserProfileResponse, _err error) {
  var _args38 PrimaryAccountInitServiceGetUserProfileArgs
  _args38.AuthSessionId = authSessionId
  _args38.AccountIdentifier = accountIdentifier
  var _result40 PrimaryAccountInitServiceGetUserProfileResult
  var _meta39 thrift.ResponseMeta
  _meta39, _err = p.Client_().Call(ctx, "getUserProfile", &_args38, &_result40)
  p.SetLastResponseMeta_(_meta39)
  if _err != nil {
    return
  }
  switch {
  case _result40.E!= nil:
    return _r, _result40.E
  }

  if _ret41 := _result40.GetSuccess(); _ret41 != nil {
    return _ret41, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getUserProfile failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - AccountIdentifier
func (p *PrimaryAccountInitServiceClient) IssueWebAuthDetailsForAcctVerif(ctx context.Context, authSessionId string, accountIdentifier *AccountIdentifier) (_r *IssueWebAuthDetailsForAcctVerifResponse, _err error) {
  var _args42 PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs
  _args42.AuthSessionId = authSessionId
  _args42.AccountIdentifier = accountIdentifier
  var _result44 PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult
  var _meta43 thrift.ResponseMeta
  _meta43, _err = p.Client_().Call(ctx, "issueWebAuthDetailsForAcctVerif", &_args42, &_result44)
  p.SetLastResponseMeta_(_meta43)
  if _err != nil {
    return
  }
  switch {
  case _result44.E!= nil:
    return _r, _result44.E
  }

  if _ret45 := _result44.GetSuccess(); _ret45 != nil {
    return _ret45, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "issueWebAuthDetailsForAcctVerif failed: unknown result")
}

// Parameters:
//  - AuthSessionId
func (p *PrimaryAccountInitServiceClient) IssueWebAuthDetailsForSecondAuth(ctx context.Context, authSessionId string) (_r *IssueWebAuthDetailsForSecondAuthResponse, _err error) {
  var _args46 PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs
  _args46.AuthSessionId = authSessionId
  var _result48 PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult
  var _meta47 thrift.ResponseMeta
  _meta47, _err = p.Client_().Call(ctx, "issueWebAuthDetailsForSecondAuth", &_args46, &_result48)
  p.SetLastResponseMeta_(_meta47)
  if _err != nil {
    return
  }
  switch {
  case _result48.E!= nil:
    return _r, _result48.E
  }

  if _ret49 := _result48.GetSuccess(); _ret49 != nil {
    return _ret49, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "issueWebAuthDetailsForSecondAuth failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *PrimaryAccountInitServiceClient) ExchangeEncryptionKey(ctx context.Context, authSessionId string, request *ExchangeEncryptionKeyRequest) (_r *ExchangeEncryptionKeyResponse, _err error) {
  var _args50 PrimaryAccountInitServiceExchangeEncryptionKeyArgs
  _args50.AuthSessionId = authSessionId
  _args50.Request = request
  var _result52 PrimaryAccountInitServiceExchangeEncryptionKeyResult
  var _meta51 thrift.ResponseMeta
  _meta51, _err = p.Client_().Call(ctx, "exchangeEncryptionKey", &_args50, &_result52)
  p.SetLastResponseMeta_(_meta51)
  if _err != nil {
    return
  }
  switch {
  case _result52.E!= nil:
    return _r, _result52.E
  }

  if _ret53 := _result52.GetSuccess(); _ret53 != nil {
    return _ret53, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "exchangeEncryptionKey failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - EncryptedPassword
func (p *PrimaryAccountInitServiceClient) SetPassword(ctx context.Context, authSessionId string, encryptedPassword *EncryptedPassword) (_r *SetPasswordResponse, _err error) {
  var _args54 PrimaryAccountInitServiceSetPasswordArgs
  _args54.AuthSessionId = authSessionId
  _args54.EncryptedPassword = encryptedPassword
  var _result56 PrimaryAccountInitServiceSetPasswordResult
  var _meta55 thrift.ResponseMeta
  _meta55, _err = p.Client_().Call(ctx, "setPassword", &_args54, &_result56)
  p.SetLastResponseMeta_(_meta55)
  if _err != nil {
    return
  }
  switch {
  case _result56.E!= nil:
    return _r, _result56.E
  }

  if _ret57 := _result56.GetSuccess(); _ret57 != nil {
    return _ret57, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "setPassword failed: unknown result")
}

// Parameters:
//  - AuthSessionId
//  - Device
//  - UserPhoneNumber
//  - VerifMethod
func (p *PrimaryAccountInitServiceClient) SendPinCodeForPhone(ctx context.Context, authSessionId string, device *Device, userPhoneNumber *UserPhoneNumber, verifMethod PhoneVerifMethod) (_r *SendPinCodeForPhoneResponse, _err error) {
  var _args58 PrimaryAccountInitServiceSendPinCodeForPhoneArgs
  _args58.AuthSessionId = authSessionId
  _args58.Device = device
  _args58.UserPhoneNumber = userPhoneNumber
  _args58.VerifMethod = verifMethod
  var _result60 PrimaryAccountInitServiceSendPinCodeForPhoneResult
  var _meta59 thrift.ResponseMeta
  _meta59, _err = p.Client_().Call(ctx, "sendPinCodeForPhone", &_args58, &_result60)
  p.SetLastResponseMeta_(_meta59)
  if _err != nil {
    return
  }
  switch {
  case _result60.E!= nil:
    return _r, _result60.E
  }

  if _ret61 := _result60.GetSuccess(); _ret61 != nil {
    return _ret61, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "sendPinCodeForPhone failed: unknown result")
}

// Parameters:
//  - AuthSessionId
func (p *PrimaryAccountInitServiceClient) GetSecondAuthMethod(ctx context.Context, authSessionId string) (_r *GetSecondAuthMethodResponse, _err error) {
  var _args62 PrimaryAccountInitServiceGetSecondAuthMethodArgs
  _args62.AuthSessionId = authSessionId
  var _result64 PrimaryAccountInitServiceGetSecondAuthMethodResult
  var _meta63 thrift.ResponseMeta
  _meta63, _err = p.Client_().Call(ctx, "getSecondAuthMethod", &_args62, &_result64)
  p.SetLastResponseMeta_(_meta63)
  if _err != nil {
    return
  }
  switch {
  case _result64.E!= nil:
    return _r, _result64.E
  }

  if _ret65 := _result64.GetSuccess(); _ret65 != nil {
    return _ret65, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSecondAuthMethod failed: unknown result")
}

type PrimaryAccountInitServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PrimaryAccountInitService
}

func (p *PrimaryAccountInitServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PrimaryAccountInitServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PrimaryAccountInitServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPrimaryAccountInitServiceProcessor(handler PrimaryAccountInitService) *PrimaryAccountInitServiceProcessor {

  self66 := &PrimaryAccountInitServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self66.processorMap["openSession"] = &primaryAccountInitServiceProcessorOpenSession{handler:handler}
  self66.processorMap["getAcctVerifMethod"] = &primaryAccountInitServiceProcessorGetAcctVerifMethod{handler:handler}
  self66.processorMap["registerPrimaryUsingPhone"] = &primaryAccountInitServiceProcessorRegisterPrimaryUsingPhone{handler:handler}
  self66.processorMap["migratePrimaryUsingPhone"] = &primaryAccountInitServiceProcessorMigratePrimaryUsingPhone{handler:handler}
  self66.processorMap["getPhoneVerifMethod"] = &primaryAccountInitServiceProcessorGetPhoneVerifMethod{handler:handler}
  self66.processorMap["verifyPhone"] = &primaryAccountInitServiceProcessorVerifyPhone{handler:handler}
  self66.processorMap["verifyAccountUsingPwd"] = &primaryAccountInitServiceProcessorVerifyAccountUsingPwd{handler:handler}
  self66.processorMap["validateProfile"] = &primaryAccountInitServiceProcessorValidateProfile{handler:handler}
  self66.processorMap["getUserProfile"] = &primaryAccountInitServiceProcessorGetUserProfile{handler:handler}
  self66.processorMap["issueWebAuthDetailsForAcctVerif"] = &primaryAccountInitServiceProcessorIssueWebAuthDetailsForAcctVerif{handler:handler}
  self66.processorMap["issueWebAuthDetailsForSecondAuth"] = &primaryAccountInitServiceProcessorIssueWebAuthDetailsForSecondAuth{handler:handler}
  self66.processorMap["exchangeEncryptionKey"] = &primaryAccountInitServiceProcessorExchangeEncryptionKey{handler:handler}
  self66.processorMap["setPassword"] = &primaryAccountInitServiceProcessorSetPassword{handler:handler}
  self66.processorMap["sendPinCodeForPhone"] = &primaryAccountInitServiceProcessorSendPinCodeForPhone{handler:handler}
  self66.processorMap["getSecondAuthMethod"] = &primaryAccountInitServiceProcessorGetSecondAuthMethod{handler:handler}
return self66
}

func (p *PrimaryAccountInitServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x67 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x67.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x67

}

type primaryAccountInitServiceProcessorOpenSession struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorOpenSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err68 error
  args := PrimaryAccountInitServiceOpenSessionArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "openSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceOpenSessionResult{}
  if retval, err2 := p.handler.OpenSession(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc69 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openSession: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "openSession", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err68 = thrift.WrapTException(err2)
      }
      if err2 := _exc69.Write(ctx, oprot); _write_err68 == nil && err2 != nil {
        _write_err68 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err68 == nil && err2 != nil {
        _write_err68 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err68 == nil && err2 != nil {
        _write_err68 = thrift.WrapTException(err2)
      }
      if _write_err68 != nil {
        return false, thrift.WrapTException(_write_err68)
      }
      return true, err
    }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "openSession", thrift.REPLY, seqId); err2 != nil {
    _write_err68 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err68 == nil && err2 != nil {
    _write_err68 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err68 == nil && err2 != nil {
    _write_err68 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err68 == nil && err2 != nil {
    _write_err68 = thrift.WrapTException(err2)
  }
  if _write_err68 != nil {
    return false, thrift.WrapTException(_write_err68)
  }
  return true, err
}

type primaryAccountInitServiceProcessorGetAcctVerifMethod struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorGetAcctVerifMethod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err70 error
  args := PrimaryAccountInitServiceGetAcctVerifMethodArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAcctVerifMethod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceGetAcctVerifMethodResult{}
  if retval, err2 := p.handler.GetAcctVerifMethod(ctx, args.AuthSessionId, args.AccountIdentifier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc71 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAcctVerifMethod: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "getAcctVerifMethod", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err70 = thrift.WrapTException(err2)
      }
      if err2 := _exc71.Write(ctx, oprot); _write_err70 == nil && err2 != nil {
        _write_err70 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err70 == nil && err2 != nil {
        _write_err70 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err70 == nil && err2 != nil {
        _write_err70 = thrift.WrapTException(err2)
      }
      if _write_err70 != nil {
        return false, thrift.WrapTException(_write_err70)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getAcctVerifMethod", thrift.REPLY, seqId); err2 != nil {
    _write_err70 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err70 == nil && err2 != nil {
    _write_err70 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err70 == nil && err2 != nil {
    _write_err70 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err70 == nil && err2 != nil {
    _write_err70 = thrift.WrapTException(err2)
  }
  if _write_err70 != nil {
    return false, thrift.WrapTException(_write_err70)
  }
  return true, err
}

type primaryAccountInitServiceProcessorRegisterPrimaryUsingPhone struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorRegisterPrimaryUsingPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err72 error
  args := PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerPrimaryUsingPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult{}
  if retval, err2 := p.handler.RegisterPrimaryUsingPhone(ctx, args.AuthSessionId); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc73 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerPrimaryUsingPhone: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "registerPrimaryUsingPhone", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err72 = thrift.WrapTException(err2)
      }
      if err2 := _exc73.Write(ctx, oprot); _write_err72 == nil && err2 != nil {
        _write_err72 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err72 == nil && err2 != nil {
        _write_err72 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err72 == nil && err2 != nil {
        _write_err72 = thrift.WrapTException(err2)
      }
      if _write_err72 != nil {
        return false, thrift.WrapTException(_write_err72)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "registerPrimaryUsingPhone", thrift.REPLY, seqId); err2 != nil {
    _write_err72 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err72 == nil && err2 != nil {
    _write_err72 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err72 == nil && err2 != nil {
    _write_err72 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err72 == nil && err2 != nil {
    _write_err72 = thrift.WrapTException(err2)
  }
  if _write_err72 != nil {
    return false, thrift.WrapTException(_write_err72)
  }
  return true, err
}

type primaryAccountInitServiceProcessorMigratePrimaryUsingPhone struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorMigratePrimaryUsingPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err74 error
  args := PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "migratePrimaryUsingPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult{}
  if retval, err2 := p.handler.MigratePrimaryUsingPhone(ctx, args.AuthSessionId); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc75 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing migratePrimaryUsingPhone: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "migratePrimaryUsingPhone", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err74 = thrift.WrapTException(err2)
      }
      if err2 := _exc75.Write(ctx, oprot); _write_err74 == nil && err2 != nil {
        _write_err74 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err74 == nil && err2 != nil {
        _write_err74 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err74 == nil && err2 != nil {
        _write_err74 = thrift.WrapTException(err2)
      }
      if _write_err74 != nil {
        return false, thrift.WrapTException(_write_err74)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "migratePrimaryUsingPhone", thrift.REPLY, seqId); err2 != nil {
    _write_err74 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err74 == nil && err2 != nil {
    _write_err74 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err74 == nil && err2 != nil {
    _write_err74 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err74 == nil && err2 != nil {
    _write_err74 = thrift.WrapTException(err2)
  }
  if _write_err74 != nil {
    return false, thrift.WrapTException(_write_err74)
  }
  return true, err
}

type primaryAccountInitServiceProcessorGetPhoneVerifMethod struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorGetPhoneVerifMethod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err76 error
  args := PrimaryAccountInitServiceGetPhoneVerifMethodArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getPhoneVerifMethod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceGetPhoneVerifMethodResult{}
  if retval, err2 := p.handler.GetPhoneVerifMethod(ctx, args.AuthSessionId, args.Device, args.UserPhoneNumber); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc77 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPhoneVerifMethod: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "getPhoneVerifMethod", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err76 = thrift.WrapTException(err2)
      }
      if err2 := _exc77.Write(ctx, oprot); _write_err76 == nil && err2 != nil {
        _write_err76 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err76 == nil && err2 != nil {
        _write_err76 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err76 == nil && err2 != nil {
        _write_err76 = thrift.WrapTException(err2)
      }
      if _write_err76 != nil {
        return false, thrift.WrapTException(_write_err76)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getPhoneVerifMethod", thrift.REPLY, seqId); err2 != nil {
    _write_err76 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err76 == nil && err2 != nil {
    _write_err76 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err76 == nil && err2 != nil {
    _write_err76 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err76 == nil && err2 != nil {
    _write_err76 = thrift.WrapTException(err2)
  }
  if _write_err76 != nil {
    return false, thrift.WrapTException(_write_err76)
  }
  return true, err
}

type primaryAccountInitServiceProcessorVerifyPhone struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorVerifyPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err78 error
  args := PrimaryAccountInitServiceVerifyPhoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceVerifyPhoneResult{}
  if retval, err2 := p.handler.VerifyPhone(ctx, args.AuthSessionId, args.Device, args.UserPhoneNumber, args.PinCode); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc79 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyPhone: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "verifyPhone", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err78 = thrift.WrapTException(err2)
      }
      if err2 := _exc79.Write(ctx, oprot); _write_err78 == nil && err2 != nil {
        _write_err78 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err78 == nil && err2 != nil {
        _write_err78 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err78 == nil && err2 != nil {
        _write_err78 = thrift.WrapTException(err2)
      }
      if _write_err78 != nil {
        return false, thrift.WrapTException(_write_err78)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "verifyPhone", thrift.REPLY, seqId); err2 != nil {
    _write_err78 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err78 == nil && err2 != nil {
    _write_err78 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err78 == nil && err2 != nil {
    _write_err78 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err78 == nil && err2 != nil {
    _write_err78 = thrift.WrapTException(err2)
  }
  if _write_err78 != nil {
    return false, thrift.WrapTException(_write_err78)
  }
  return true, err
}

type primaryAccountInitServiceProcessorVerifyAccountUsingPwd struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorVerifyAccountUsingPwd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err80 error
  args := PrimaryAccountInitServiceVerifyAccountUsingPwdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyAccountUsingPwd", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceVerifyAccountUsingPwdResult{}
  if retval, err2 := p.handler.VerifyAccountUsingPwd(ctx, args.AuthSessionId, args.AccountIdentifier, args.EncryptedPassword); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc81 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyAccountUsingPwd: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "verifyAccountUsingPwd", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err80 = thrift.WrapTException(err2)
      }
      if err2 := _exc81.Write(ctx, oprot); _write_err80 == nil && err2 != nil {
        _write_err80 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err80 == nil && err2 != nil {
        _write_err80 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err80 == nil && err2 != nil {
        _write_err80 = thrift.WrapTException(err2)
      }
      if _write_err80 != nil {
        return false, thrift.WrapTException(_write_err80)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "verifyAccountUsingPwd", thrift.REPLY, seqId); err2 != nil {
    _write_err80 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err80 == nil && err2 != nil {
    _write_err80 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err80 == nil && err2 != nil {
    _write_err80 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err80 == nil && err2 != nil {
    _write_err80 = thrift.WrapTException(err2)
  }
  if _write_err80 != nil {
    return false, thrift.WrapTException(_write_err80)
  }
  return true, err
}

type primaryAccountInitServiceProcessorValidateProfile struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorValidateProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err82 error
  args := PrimaryAccountInitServiceValidateProfileArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "validateProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceValidateProfileResult{}
  if retval, err2 := p.handler.ValidateProfile(ctx, args.AuthSessionId, args.DisplayName); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc83 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing validateProfile: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "validateProfile", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err82 = thrift.WrapTException(err2)
      }
      if err2 := _exc83.Write(ctx, oprot); _write_err82 == nil && err2 != nil {
        _write_err82 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err82 == nil && err2 != nil {
        _write_err82 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err82 == nil && err2 != nil {
        _write_err82 = thrift.WrapTException(err2)
      }
      if _write_err82 != nil {
        return false, thrift.WrapTException(_write_err82)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "validateProfile", thrift.REPLY, seqId); err2 != nil {
    _write_err82 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err82 == nil && err2 != nil {
    _write_err82 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err82 == nil && err2 != nil {
    _write_err82 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err82 == nil && err2 != nil {
    _write_err82 = thrift.WrapTException(err2)
  }
  if _write_err82 != nil {
    return false, thrift.WrapTException(_write_err82)
  }
  return true, err
}

type primaryAccountInitServiceProcessorGetUserProfile struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorGetUserProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err84 error
  args := PrimaryAccountInitServiceGetUserProfileArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getUserProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceGetUserProfileResult{}
  if retval, err2 := p.handler.GetUserProfile(ctx, args.AuthSessionId, args.AccountIdentifier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc85 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserProfile: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "getUserProfile", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err84 = thrift.WrapTException(err2)
      }
      if err2 := _exc85.Write(ctx, oprot); _write_err84 == nil && err2 != nil {
        _write_err84 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err84 == nil && err2 != nil {
        _write_err84 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err84 == nil && err2 != nil {
        _write_err84 = thrift.WrapTException(err2)
      }
      if _write_err84 != nil {
        return false, thrift.WrapTException(_write_err84)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getUserProfile", thrift.REPLY, seqId); err2 != nil {
    _write_err84 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err84 == nil && err2 != nil {
    _write_err84 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err84 == nil && err2 != nil {
    _write_err84 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err84 == nil && err2 != nil {
    _write_err84 = thrift.WrapTException(err2)
  }
  if _write_err84 != nil {
    return false, thrift.WrapTException(_write_err84)
  }
  return true, err
}

type primaryAccountInitServiceProcessorIssueWebAuthDetailsForAcctVerif struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorIssueWebAuthDetailsForAcctVerif) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err86 error
  args := PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueWebAuthDetailsForAcctVerif", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult{}
  if retval, err2 := p.handler.IssueWebAuthDetailsForAcctVerif(ctx, args.AuthSessionId, args.AccountIdentifier); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc87 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueWebAuthDetailsForAcctVerif: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "issueWebAuthDetailsForAcctVerif", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err86 = thrift.WrapTException(err2)
      }
      if err2 := _exc87.Write(ctx, oprot); _write_err86 == nil && err2 != nil {
        _write_err86 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err86 == nil && err2 != nil {
        _write_err86 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err86 == nil && err2 != nil {
        _write_err86 = thrift.WrapTException(err2)
      }
      if _write_err86 != nil {
        return false, thrift.WrapTException(_write_err86)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "issueWebAuthDetailsForAcctVerif", thrift.REPLY, seqId); err2 != nil {
    _write_err86 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err86 == nil && err2 != nil {
    _write_err86 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err86 == nil && err2 != nil {
    _write_err86 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err86 == nil && err2 != nil {
    _write_err86 = thrift.WrapTException(err2)
  }
  if _write_err86 != nil {
    return false, thrift.WrapTException(_write_err86)
  }
  return true, err
}

type primaryAccountInitServiceProcessorIssueWebAuthDetailsForSecondAuth struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorIssueWebAuthDetailsForSecondAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err88 error
  args := PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueWebAuthDetailsForSecondAuth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult{}
  if retval, err2 := p.handler.IssueWebAuthDetailsForSecondAuth(ctx, args.AuthSessionId); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc89 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueWebAuthDetailsForSecondAuth: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "issueWebAuthDetailsForSecondAuth", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err88 = thrift.WrapTException(err2)
      }
      if err2 := _exc89.Write(ctx, oprot); _write_err88 == nil && err2 != nil {
        _write_err88 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err88 == nil && err2 != nil {
        _write_err88 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err88 == nil && err2 != nil {
        _write_err88 = thrift.WrapTException(err2)
      }
      if _write_err88 != nil {
        return false, thrift.WrapTException(_write_err88)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "issueWebAuthDetailsForSecondAuth", thrift.REPLY, seqId); err2 != nil {
    _write_err88 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err88 == nil && err2 != nil {
    _write_err88 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err88 == nil && err2 != nil {
    _write_err88 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err88 == nil && err2 != nil {
    _write_err88 = thrift.WrapTException(err2)
  }
  if _write_err88 != nil {
    return false, thrift.WrapTException(_write_err88)
  }
  return true, err
}

type primaryAccountInitServiceProcessorExchangeEncryptionKey struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorExchangeEncryptionKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err90 error
  args := PrimaryAccountInitServiceExchangeEncryptionKeyArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "exchangeEncryptionKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceExchangeEncryptionKeyResult{}
  if retval, err2 := p.handler.ExchangeEncryptionKey(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc91 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exchangeEncryptionKey: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "exchangeEncryptionKey", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err90 = thrift.WrapTException(err2)
      }
      if err2 := _exc91.Write(ctx, oprot); _write_err90 == nil && err2 != nil {
        _write_err90 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err90 == nil && err2 != nil {
        _write_err90 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err90 == nil && err2 != nil {
        _write_err90 = thrift.WrapTException(err2)
      }
      if _write_err90 != nil {
        return false, thrift.WrapTException(_write_err90)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "exchangeEncryptionKey", thrift.REPLY, seqId); err2 != nil {
    _write_err90 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err90 == nil && err2 != nil {
    _write_err90 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err90 == nil && err2 != nil {
    _write_err90 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err90 == nil && err2 != nil {
    _write_err90 = thrift.WrapTException(err2)
  }
  if _write_err90 != nil {
    return false, thrift.WrapTException(_write_err90)
  }
  return true, err
}

type primaryAccountInitServiceProcessorSetPassword struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorSetPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err92 error
  args := PrimaryAccountInitServiceSetPasswordArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setPassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceSetPasswordResult{}
  if retval, err2 := p.handler.SetPassword(ctx, args.AuthSessionId, args.EncryptedPassword); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc93 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setPassword: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "setPassword", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err92 = thrift.WrapTException(err2)
      }
      if err2 := _exc93.Write(ctx, oprot); _write_err92 == nil && err2 != nil {
        _write_err92 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err92 == nil && err2 != nil {
        _write_err92 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err92 == nil && err2 != nil {
        _write_err92 = thrift.WrapTException(err2)
      }
      if _write_err92 != nil {
        return false, thrift.WrapTException(_write_err92)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "setPassword", thrift.REPLY, seqId); err2 != nil {
    _write_err92 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err92 == nil && err2 != nil {
    _write_err92 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err92 == nil && err2 != nil {
    _write_err92 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err92 == nil && err2 != nil {
    _write_err92 = thrift.WrapTException(err2)
  }
  if _write_err92 != nil {
    return false, thrift.WrapTException(_write_err92)
  }
  return true, err
}

type primaryAccountInitServiceProcessorSendPinCodeForPhone struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorSendPinCodeForPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err94 error
  args := PrimaryAccountInitServiceSendPinCodeForPhoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendPinCodeForPhone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceSendPinCodeForPhoneResult{}
  if retval, err2 := p.handler.SendPinCodeForPhone(ctx, args.AuthSessionId, args.Device, args.UserPhoneNumber, args.VerifMethod); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc95 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendPinCodeForPhone: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "sendPinCodeForPhone", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err94 = thrift.WrapTException(err2)
      }
      if err2 := _exc95.Write(ctx, oprot); _write_err94 == nil && err2 != nil {
        _write_err94 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err94 == nil && err2 != nil {
        _write_err94 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err94 == nil && err2 != nil {
        _write_err94 = thrift.WrapTException(err2)
      }
      if _write_err94 != nil {
        return false, thrift.WrapTException(_write_err94)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "sendPinCodeForPhone", thrift.REPLY, seqId); err2 != nil {
    _write_err94 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err94 == nil && err2 != nil {
    _write_err94 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err94 == nil && err2 != nil {
    _write_err94 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err94 == nil && err2 != nil {
    _write_err94 = thrift.WrapTException(err2)
  }
  if _write_err94 != nil {
    return false, thrift.WrapTException(_write_err94)
  }
  return true, err
}

type primaryAccountInitServiceProcessorGetSecondAuthMethod struct {
  handler PrimaryAccountInitService
}

func (p *primaryAccountInitServiceProcessorGetSecondAuthMethod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err96 error
  args := PrimaryAccountInitServiceGetSecondAuthMethodArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSecondAuthMethod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PrimaryAccountInitServiceGetSecondAuthMethodResult{}
  if retval, err2 := p.handler.GetSecondAuthMethod(ctx, args.AuthSessionId); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *AuthException:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc97 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSecondAuthMethod: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "getSecondAuthMethod", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err96 = thrift.WrapTException(err2)
      }
      if err2 := _exc97.Write(ctx, oprot); _write_err96 == nil && err2 != nil {
        _write_err96 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err96 == nil && err2 != nil {
        _write_err96 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err96 == nil && err2 != nil {
        _write_err96 = thrift.WrapTException(err2)
      }
      if _write_err96 != nil {
        return false, thrift.WrapTException(_write_err96)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getSecondAuthMethod", thrift.REPLY, seqId); err2 != nil {
    _write_err96 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err96 == nil && err2 != nil {
    _write_err96 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err96 == nil && err2 != nil {
    _write_err96 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err96 == nil && err2 != nil {
    _write_err96 = thrift.WrapTException(err2)
  }
  if _write_err96 != nil {
    return false, thrift.WrapTException(_write_err96)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type PrimaryAccountInitServiceOpenSessionArgs struct {
  Request *OpenSessionRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewPrimaryAccountInitServiceOpenSessionArgs() *PrimaryAccountInitServiceOpenSessionArgs {
  return &PrimaryAccountInitServiceOpenSessionArgs{}
}

var PrimaryAccountInitServiceOpenSessionArgs_Request_DEFAULT *OpenSessionRequest
func (p *PrimaryAccountInitServiceOpenSessionArgs) GetRequest() *OpenSessionRequest {
  if !p.IsSetRequest() {
    return PrimaryAccountInitServiceOpenSessionArgs_Request_DEFAULT
  }
return p.Request
}
func (p *PrimaryAccountInitServiceOpenSessionArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *PrimaryAccountInitServiceOpenSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceOpenSessionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &OpenSessionRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceOpenSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "openSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceOpenSessionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceOpenSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceOpenSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceOpenSessionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceOpenSessionResult() *PrimaryAccountInitServiceOpenSessionResult {
  return &PrimaryAccountInitServiceOpenSessionResult{}
}

var PrimaryAccountInitServiceOpenSessionResult_Success_DEFAULT string
func (p *PrimaryAccountInitServiceOpenSessionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceOpenSessionResult_Success_DEFAULT
  }
return *p.Success
}
var PrimaryAccountInitServiceOpenSessionResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceOpenSessionResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceOpenSessionResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceOpenSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceOpenSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceOpenSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceOpenSessionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *PrimaryAccountInitServiceOpenSessionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceOpenSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "openSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceOpenSessionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceOpenSessionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceOpenSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceOpenSessionResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - AccountIdentifier
type PrimaryAccountInitServiceGetAcctVerifMethodArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  AccountIdentifier *AccountIdentifier `thrift:"accountIdentifier,2" db:"accountIdentifier" json:"accountIdentifier"`
}

func NewPrimaryAccountInitServiceGetAcctVerifMethodArgs() *PrimaryAccountInitServiceGetAcctVerifMethodArgs {
  return &PrimaryAccountInitServiceGetAcctVerifMethodArgs{}
}


func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceGetAcctVerifMethodArgs_AccountIdentifier_DEFAULT *AccountIdentifier
func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs) GetAccountIdentifier() *AccountIdentifier {
  if !p.IsSetAccountIdentifier() {
    return PrimaryAccountInitServiceGetAcctVerifMethodArgs_AccountIdentifier_DEFAULT
  }
return p.AccountIdentifier
}
func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs) IsSetAccountIdentifier() bool {
  return p.AccountIdentifier != nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.AccountIdentifier = &AccountIdentifier{}
  if err := p.AccountIdentifier.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AccountIdentifier), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAcctVerifMethod_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountIdentifier", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountIdentifier: ", p), err) }
  if err := p.AccountIdentifier.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AccountIdentifier), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountIdentifier: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceGetAcctVerifMethodArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceGetAcctVerifMethodResult struct {
  Success *GetAcctVerifMethodResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceGetAcctVerifMethodResult() *PrimaryAccountInitServiceGetAcctVerifMethodResult {
  return &PrimaryAccountInitServiceGetAcctVerifMethodResult{}
}

var PrimaryAccountInitServiceGetAcctVerifMethodResult_Success_DEFAULT *GetAcctVerifMethodResponse
func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) GetSuccess() *GetAcctVerifMethodResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceGetAcctVerifMethodResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceGetAcctVerifMethodResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceGetAcctVerifMethodResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetAcctVerifMethodResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAcctVerifMethod_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceGetAcctVerifMethodResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceGetAcctVerifMethodResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
}

func NewPrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs() *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs {
  return &PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs{}
}


func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerPrimaryUsingPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceRegisterPrimaryUsingPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult struct {
  Success *RegisterPrimaryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult() *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult {
  return &PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult{}
}

var PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult_Success_DEFAULT *RegisterPrimaryResponse
func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) GetSuccess() *RegisterPrimaryResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RegisterPrimaryResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerPrimaryUsingPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceRegisterPrimaryUsingPhoneResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewPrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs() *PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs {
  return &PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs{}
}


func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "migratePrimaryUsingPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceMigratePrimaryUsingPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult struct {
  Success *MigratePrimaryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceMigratePrimaryUsingPhoneResult() *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult {
  return &PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult{}
}

var PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult_Success_DEFAULT *MigratePrimaryResponse
func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) GetSuccess() *MigratePrimaryResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MigratePrimaryResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "migratePrimaryUsingPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceMigratePrimaryUsingPhoneResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Device
//  - UserPhoneNumber
type PrimaryAccountInitServiceGetPhoneVerifMethodArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  Device *Device `thrift:"device,2" db:"device" json:"device"`
  UserPhoneNumber *UserPhoneNumber `thrift:"userPhoneNumber,3" db:"userPhoneNumber" json:"userPhoneNumber"`
}

func NewPrimaryAccountInitServiceGetPhoneVerifMethodArgs() *PrimaryAccountInitServiceGetPhoneVerifMethodArgs {
  return &PrimaryAccountInitServiceGetPhoneVerifMethodArgs{}
}


func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceGetPhoneVerifMethodArgs_Device_DEFAULT *Device
func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) GetDevice() *Device {
  if !p.IsSetDevice() {
    return PrimaryAccountInitServiceGetPhoneVerifMethodArgs_Device_DEFAULT
  }
return p.Device
}
var PrimaryAccountInitServiceGetPhoneVerifMethodArgs_UserPhoneNumber_DEFAULT *UserPhoneNumber
func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) GetUserPhoneNumber() *UserPhoneNumber {
  if !p.IsSetUserPhoneNumber() {
    return PrimaryAccountInitServiceGetPhoneVerifMethodArgs_UserPhoneNumber_DEFAULT
  }
return p.UserPhoneNumber
}
func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) IsSetDevice() bool {
  return p.Device != nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) IsSetUserPhoneNumber() bool {
  return p.UserPhoneNumber != nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Device = &Device{}
  if err := p.Device.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Device), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.UserPhoneNumber = &UserPhoneNumber{}
  if err := p.UserPhoneNumber.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserPhoneNumber), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPhoneVerifMethod_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:device: ", p), err) }
  if err := p.Device.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Device), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:device: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userPhoneNumber", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userPhoneNumber: ", p), err) }
  if err := p.UserPhoneNumber.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserPhoneNumber), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userPhoneNumber: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceGetPhoneVerifMethodArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceGetPhoneVerifMethodResult struct {
  Success *GetPhoneVerifMethodResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceGetPhoneVerifMethodResult() *PrimaryAccountInitServiceGetPhoneVerifMethodResult {
  return &PrimaryAccountInitServiceGetPhoneVerifMethodResult{}
}

var PrimaryAccountInitServiceGetPhoneVerifMethodResult_Success_DEFAULT *GetPhoneVerifMethodResponse
func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) GetSuccess() *GetPhoneVerifMethodResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceGetPhoneVerifMethodResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceGetPhoneVerifMethodResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceGetPhoneVerifMethodResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetPhoneVerifMethodResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPhoneVerifMethod_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceGetPhoneVerifMethodResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceGetPhoneVerifMethodResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Device
//  - UserPhoneNumber
//  - PinCode
type PrimaryAccountInitServiceVerifyPhoneArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  Device *Device `thrift:"device,2" db:"device" json:"device"`
  UserPhoneNumber *UserPhoneNumber `thrift:"userPhoneNumber,3" db:"userPhoneNumber" json:"userPhoneNumber"`
  PinCode string `thrift:"pinCode,4" db:"pinCode" json:"pinCode"`
}

func NewPrimaryAccountInitServiceVerifyPhoneArgs() *PrimaryAccountInitServiceVerifyPhoneArgs {
  return &PrimaryAccountInitServiceVerifyPhoneArgs{}
}


func (p *PrimaryAccountInitServiceVerifyPhoneArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceVerifyPhoneArgs_Device_DEFAULT *Device
func (p *PrimaryAccountInitServiceVerifyPhoneArgs) GetDevice() *Device {
  if !p.IsSetDevice() {
    return PrimaryAccountInitServiceVerifyPhoneArgs_Device_DEFAULT
  }
return p.Device
}
var PrimaryAccountInitServiceVerifyPhoneArgs_UserPhoneNumber_DEFAULT *UserPhoneNumber
func (p *PrimaryAccountInitServiceVerifyPhoneArgs) GetUserPhoneNumber() *UserPhoneNumber {
  if !p.IsSetUserPhoneNumber() {
    return PrimaryAccountInitServiceVerifyPhoneArgs_UserPhoneNumber_DEFAULT
  }
return p.UserPhoneNumber
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) GetPinCode() string {
  return p.PinCode
}
func (p *PrimaryAccountInitServiceVerifyPhoneArgs) IsSetDevice() bool {
  return p.Device != nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) IsSetUserPhoneNumber() bool {
  return p.UserPhoneNumber != nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Device = &Device{}
  if err := p.Device.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Device), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.UserPhoneNumber = &UserPhoneNumber{}
  if err := p.UserPhoneNumber.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserPhoneNumber), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:device: ", p), err) }
  if err := p.Device.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Device), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:device: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userPhoneNumber", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userPhoneNumber: ", p), err) }
  if err := p.UserPhoneNumber.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserPhoneNumber), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userPhoneNumber: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pinCode: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceVerifyPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceVerifyPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceVerifyPhoneResult struct {
  Success *VerifyPhoneResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceVerifyPhoneResult() *PrimaryAccountInitServiceVerifyPhoneResult {
  return &PrimaryAccountInitServiceVerifyPhoneResult{}
}

var PrimaryAccountInitServiceVerifyPhoneResult_Success_DEFAULT *VerifyPhoneResponse
func (p *PrimaryAccountInitServiceVerifyPhoneResult) GetSuccess() *VerifyPhoneResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceVerifyPhoneResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceVerifyPhoneResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceVerifyPhoneResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceVerifyPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceVerifyPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerifyPhoneResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceVerifyPhoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceVerifyPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceVerifyPhoneResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - AccountIdentifier
//  - EncryptedPassword
type PrimaryAccountInitServiceVerifyAccountUsingPwdArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  AccountIdentifier *AccountIdentifier `thrift:"accountIdentifier,2" db:"accountIdentifier" json:"accountIdentifier"`
  EncryptedPassword *EncryptedPassword `thrift:"encryptedPassword,3" db:"encryptedPassword" json:"encryptedPassword"`
}

func NewPrimaryAccountInitServiceVerifyAccountUsingPwdArgs() *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs {
  return &PrimaryAccountInitServiceVerifyAccountUsingPwdArgs{}
}


func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceVerifyAccountUsingPwdArgs_AccountIdentifier_DEFAULT *AccountIdentifier
func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) GetAccountIdentifier() *AccountIdentifier {
  if !p.IsSetAccountIdentifier() {
    return PrimaryAccountInitServiceVerifyAccountUsingPwdArgs_AccountIdentifier_DEFAULT
  }
return p.AccountIdentifier
}
var PrimaryAccountInitServiceVerifyAccountUsingPwdArgs_EncryptedPassword_DEFAULT *EncryptedPassword
func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) GetEncryptedPassword() *EncryptedPassword {
  if !p.IsSetEncryptedPassword() {
    return PrimaryAccountInitServiceVerifyAccountUsingPwdArgs_EncryptedPassword_DEFAULT
  }
return p.EncryptedPassword
}
func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) IsSetAccountIdentifier() bool {
  return p.AccountIdentifier != nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) IsSetEncryptedPassword() bool {
  return p.EncryptedPassword != nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.AccountIdentifier = &AccountIdentifier{}
  if err := p.AccountIdentifier.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AccountIdentifier), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.EncryptedPassword = &EncryptedPassword{}
  if err := p.EncryptedPassword.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EncryptedPassword), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyAccountUsingPwd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountIdentifier", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountIdentifier: ", p), err) }
  if err := p.AccountIdentifier.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AccountIdentifier), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountIdentifier: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedPassword", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:encryptedPassword: ", p), err) }
  if err := p.EncryptedPassword.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EncryptedPassword), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:encryptedPassword: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceVerifyAccountUsingPwdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceVerifyAccountUsingPwdResult struct {
  Success *VerifyAccountUsingPwdResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceVerifyAccountUsingPwdResult() *PrimaryAccountInitServiceVerifyAccountUsingPwdResult {
  return &PrimaryAccountInitServiceVerifyAccountUsingPwdResult{}
}

var PrimaryAccountInitServiceVerifyAccountUsingPwdResult_Success_DEFAULT *VerifyAccountUsingPwdResponse
func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) GetSuccess() *VerifyAccountUsingPwdResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceVerifyAccountUsingPwdResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceVerifyAccountUsingPwdResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceVerifyAccountUsingPwdResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerifyAccountUsingPwdResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyAccountUsingPwd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceVerifyAccountUsingPwdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceVerifyAccountUsingPwdResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - DisplayName
type PrimaryAccountInitServiceValidateProfileArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
}

func NewPrimaryAccountInitServiceValidateProfileArgs() *PrimaryAccountInitServiceValidateProfileArgs {
  return &PrimaryAccountInitServiceValidateProfileArgs{}
}


func (p *PrimaryAccountInitServiceValidateProfileArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}

func (p *PrimaryAccountInitServiceValidateProfileArgs) GetDisplayName() string {
  return p.DisplayName
}
func (p *PrimaryAccountInitServiceValidateProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceValidateProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceValidateProfileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *PrimaryAccountInitServiceValidateProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "validateProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceValidateProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceValidateProfileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceValidateProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceValidateProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceValidateProfileResult struct {
  Success *ValidateProfileResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceValidateProfileResult() *PrimaryAccountInitServiceValidateProfileResult {
  return &PrimaryAccountInitServiceValidateProfileResult{}
}

var PrimaryAccountInitServiceValidateProfileResult_Success_DEFAULT *ValidateProfileResponse
func (p *PrimaryAccountInitServiceValidateProfileResult) GetSuccess() *ValidateProfileResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceValidateProfileResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceValidateProfileResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceValidateProfileResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceValidateProfileResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceValidateProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceValidateProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceValidateProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceValidateProfileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ValidateProfileResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceValidateProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceValidateProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "validateProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceValidateProfileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceValidateProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceValidateProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceValidateProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - AccountIdentifier
type PrimaryAccountInitServiceGetUserProfileArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  AccountIdentifier *AccountIdentifier `thrift:"accountIdentifier,2" db:"accountIdentifier" json:"accountIdentifier"`
}

func NewPrimaryAccountInitServiceGetUserProfileArgs() *PrimaryAccountInitServiceGetUserProfileArgs {
  return &PrimaryAccountInitServiceGetUserProfileArgs{}
}


func (p *PrimaryAccountInitServiceGetUserProfileArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceGetUserProfileArgs_AccountIdentifier_DEFAULT *AccountIdentifier
func (p *PrimaryAccountInitServiceGetUserProfileArgs) GetAccountIdentifier() *AccountIdentifier {
  if !p.IsSetAccountIdentifier() {
    return PrimaryAccountInitServiceGetUserProfileArgs_AccountIdentifier_DEFAULT
  }
return p.AccountIdentifier
}
func (p *PrimaryAccountInitServiceGetUserProfileArgs) IsSetAccountIdentifier() bool {
  return p.AccountIdentifier != nil
}

func (p *PrimaryAccountInitServiceGetUserProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetUserProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceGetUserProfileArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.AccountIdentifier = &AccountIdentifier{}
  if err := p.AccountIdentifier.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AccountIdentifier), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetUserProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getUserProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceGetUserProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceGetUserProfileArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountIdentifier", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountIdentifier: ", p), err) }
  if err := p.AccountIdentifier.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AccountIdentifier), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountIdentifier: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceGetUserProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceGetUserProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceGetUserProfileResult struct {
  Success *GetUserProfileResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceGetUserProfileResult() *PrimaryAccountInitServiceGetUserProfileResult {
  return &PrimaryAccountInitServiceGetUserProfileResult{}
}

var PrimaryAccountInitServiceGetUserProfileResult_Success_DEFAULT *GetUserProfileResponse
func (p *PrimaryAccountInitServiceGetUserProfileResult) GetSuccess() *GetUserProfileResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceGetUserProfileResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceGetUserProfileResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceGetUserProfileResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceGetUserProfileResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceGetUserProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceGetUserProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceGetUserProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetUserProfileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetUserProfileResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetUserProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetUserProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getUserProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceGetUserProfileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceGetUserProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceGetUserProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceGetUserProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - AccountIdentifier
type PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  AccountIdentifier *AccountIdentifier `thrift:"accountIdentifier,2" db:"accountIdentifier" json:"accountIdentifier"`
}

func NewPrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs() *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs {
  return &PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs{}
}


func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs_AccountIdentifier_DEFAULT *AccountIdentifier
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs) GetAccountIdentifier() *AccountIdentifier {
  if !p.IsSetAccountIdentifier() {
    return PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs_AccountIdentifier_DEFAULT
  }
return p.AccountIdentifier
}
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs) IsSetAccountIdentifier() bool {
  return p.AccountIdentifier != nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.AccountIdentifier = &AccountIdentifier{}
  if err := p.AccountIdentifier.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AccountIdentifier), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueWebAuthDetailsForAcctVerif_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountIdentifier", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountIdentifier: ", p), err) }
  if err := p.AccountIdentifier.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AccountIdentifier), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountIdentifier: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult struct {
  Success *IssueWebAuthDetailsForAcctVerifResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult() *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult {
  return &PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult{}
}

var PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult_Success_DEFAULT *IssueWebAuthDetailsForAcctVerifResponse
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) GetSuccess() *IssueWebAuthDetailsForAcctVerifResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IssueWebAuthDetailsForAcctVerifResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueWebAuthDetailsForAcctVerif_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceIssueWebAuthDetailsForAcctVerifResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewPrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs() *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs {
  return &PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs{}
}


func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueWebAuthDetailsForSecondAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult struct {
  Success *IssueWebAuthDetailsForSecondAuthResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult() *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult {
  return &PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult{}
}

var PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult_Success_DEFAULT *IssueWebAuthDetailsForSecondAuthResponse
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) GetSuccess() *IssueWebAuthDetailsForSecondAuthResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IssueWebAuthDetailsForSecondAuthResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueWebAuthDetailsForSecondAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceIssueWebAuthDetailsForSecondAuthResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type PrimaryAccountInitServiceExchangeEncryptionKeyArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  Request *ExchangeEncryptionKeyRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewPrimaryAccountInitServiceExchangeEncryptionKeyArgs() *PrimaryAccountInitServiceExchangeEncryptionKeyArgs {
  return &PrimaryAccountInitServiceExchangeEncryptionKeyArgs{}
}


func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceExchangeEncryptionKeyArgs_Request_DEFAULT *ExchangeEncryptionKeyRequest
func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs) GetRequest() *ExchangeEncryptionKeyRequest {
  if !p.IsSetRequest() {
    return PrimaryAccountInitServiceExchangeEncryptionKeyArgs_Request_DEFAULT
  }
return p.Request
}
func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ExchangeEncryptionKeyRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exchangeEncryptionKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceExchangeEncryptionKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceExchangeEncryptionKeyResult struct {
  Success *ExchangeEncryptionKeyResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceExchangeEncryptionKeyResult() *PrimaryAccountInitServiceExchangeEncryptionKeyResult {
  return &PrimaryAccountInitServiceExchangeEncryptionKeyResult{}
}

var PrimaryAccountInitServiceExchangeEncryptionKeyResult_Success_DEFAULT *ExchangeEncryptionKeyResponse
func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) GetSuccess() *ExchangeEncryptionKeyResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceExchangeEncryptionKeyResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceExchangeEncryptionKeyResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceExchangeEncryptionKeyResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExchangeEncryptionKeyResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "exchangeEncryptionKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceExchangeEncryptionKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceExchangeEncryptionKeyResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - EncryptedPassword
type PrimaryAccountInitServiceSetPasswordArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  EncryptedPassword *EncryptedPassword `thrift:"encryptedPassword,2" db:"encryptedPassword" json:"encryptedPassword"`
}

func NewPrimaryAccountInitServiceSetPasswordArgs() *PrimaryAccountInitServiceSetPasswordArgs {
  return &PrimaryAccountInitServiceSetPasswordArgs{}
}


func (p *PrimaryAccountInitServiceSetPasswordArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceSetPasswordArgs_EncryptedPassword_DEFAULT *EncryptedPassword
func (p *PrimaryAccountInitServiceSetPasswordArgs) GetEncryptedPassword() *EncryptedPassword {
  if !p.IsSetEncryptedPassword() {
    return PrimaryAccountInitServiceSetPasswordArgs_EncryptedPassword_DEFAULT
  }
return p.EncryptedPassword
}
func (p *PrimaryAccountInitServiceSetPasswordArgs) IsSetEncryptedPassword() bool {
  return p.EncryptedPassword != nil
}

func (p *PrimaryAccountInitServiceSetPasswordArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSetPasswordArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceSetPasswordArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.EncryptedPassword = &EncryptedPassword{}
  if err := p.EncryptedPassword.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EncryptedPassword), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSetPasswordArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setPassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceSetPasswordArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceSetPasswordArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedPassword", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encryptedPassword: ", p), err) }
  if err := p.EncryptedPassword.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EncryptedPassword), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encryptedPassword: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceSetPasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceSetPasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceSetPasswordResult struct {
  Success *SetPasswordResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceSetPasswordResult() *PrimaryAccountInitServiceSetPasswordResult {
  return &PrimaryAccountInitServiceSetPasswordResult{}
}

var PrimaryAccountInitServiceSetPasswordResult_Success_DEFAULT *SetPasswordResponse
func (p *PrimaryAccountInitServiceSetPasswordResult) GetSuccess() *SetPasswordResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceSetPasswordResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceSetPasswordResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceSetPasswordResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceSetPasswordResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceSetPasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceSetPasswordResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceSetPasswordResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSetPasswordResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SetPasswordResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSetPasswordResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSetPasswordResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setPassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceSetPasswordResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceSetPasswordResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceSetPasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceSetPasswordResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Device
//  - UserPhoneNumber
//  - VerifMethod
type PrimaryAccountInitServiceSendPinCodeForPhoneArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  Device *Device `thrift:"device,2" db:"device" json:"device"`
  UserPhoneNumber *UserPhoneNumber `thrift:"userPhoneNumber,3" db:"userPhoneNumber" json:"userPhoneNumber"`
  VerifMethod PhoneVerifMethod `thrift:"verifMethod,4" db:"verifMethod" json:"verifMethod"`
}

func NewPrimaryAccountInitServiceSendPinCodeForPhoneArgs() *PrimaryAccountInitServiceSendPinCodeForPhoneArgs {
  return &PrimaryAccountInitServiceSendPinCodeForPhoneArgs{}
}


func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var PrimaryAccountInitServiceSendPinCodeForPhoneArgs_Device_DEFAULT *Device
func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) GetDevice() *Device {
  if !p.IsSetDevice() {
    return PrimaryAccountInitServiceSendPinCodeForPhoneArgs_Device_DEFAULT
  }
return p.Device
}
var PrimaryAccountInitServiceSendPinCodeForPhoneArgs_UserPhoneNumber_DEFAULT *UserPhoneNumber
func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) GetUserPhoneNumber() *UserPhoneNumber {
  if !p.IsSetUserPhoneNumber() {
    return PrimaryAccountInitServiceSendPinCodeForPhoneArgs_UserPhoneNumber_DEFAULT
  }
return p.UserPhoneNumber
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) GetVerifMethod() PhoneVerifMethod {
  return p.VerifMethod
}
func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) IsSetDevice() bool {
  return p.Device != nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) IsSetUserPhoneNumber() bool {
  return p.UserPhoneNumber != nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Device = &Device{}
  if err := p.Device.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Device), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.UserPhoneNumber = &UserPhoneNumber{}
  if err := p.UserPhoneNumber.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserPhoneNumber), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PhoneVerifMethod(v)
  p.VerifMethod = temp
}
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendPinCodeForPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:device: ", p), err) }
  if err := p.Device.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Device), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:device: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userPhoneNumber", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userPhoneNumber: ", p), err) }
  if err := p.UserPhoneNumber.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserPhoneNumber), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userPhoneNumber: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifMethod", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:verifMethod: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VerifMethod)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifMethod (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:verifMethod: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceSendPinCodeForPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceSendPinCodeForPhoneResult struct {
  Success *SendPinCodeForPhoneResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceSendPinCodeForPhoneResult() *PrimaryAccountInitServiceSendPinCodeForPhoneResult {
  return &PrimaryAccountInitServiceSendPinCodeForPhoneResult{}
}

var PrimaryAccountInitServiceSendPinCodeForPhoneResult_Success_DEFAULT *SendPinCodeForPhoneResponse
func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) GetSuccess() *SendPinCodeForPhoneResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceSendPinCodeForPhoneResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceSendPinCodeForPhoneResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceSendPinCodeForPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SendPinCodeForPhoneResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendPinCodeForPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceSendPinCodeForPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceSendPinCodeForPhoneResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type PrimaryAccountInitServiceGetSecondAuthMethodArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewPrimaryAccountInitServiceGetSecondAuthMethodArgs() *PrimaryAccountInitServiceGetSecondAuthMethodArgs {
  return &PrimaryAccountInitServiceGetSecondAuthMethodArgs{}
}


func (p *PrimaryAccountInitServiceGetSecondAuthMethodArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *PrimaryAccountInitServiceGetSecondAuthMethodArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSecondAuthMethod_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceGetSecondAuthMethodArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PrimaryAccountInitServiceGetSecondAuthMethodResult struct {
  Success *GetSecondAuthMethodResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *AuthException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPrimaryAccountInitServiceGetSecondAuthMethodResult() *PrimaryAccountInitServiceGetSecondAuthMethodResult {
  return &PrimaryAccountInitServiceGetSecondAuthMethodResult{}
}

var PrimaryAccountInitServiceGetSecondAuthMethodResult_Success_DEFAULT *GetSecondAuthMethodResponse
func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) GetSuccess() *GetSecondAuthMethodResponse {
  if !p.IsSetSuccess() {
    return PrimaryAccountInitServiceGetSecondAuthMethodResult_Success_DEFAULT
  }
return p.Success
}
var PrimaryAccountInitServiceGetSecondAuthMethodResult_E_DEFAULT *AuthException
func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) GetE() *AuthException {
  if !p.IsSetE() {
    return PrimaryAccountInitServiceGetSecondAuthMethodResult_E_DEFAULT
  }
return p.E
}
func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) IsSetE() bool {
  return p.E != nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetSecondAuthMethodResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &AuthException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSecondAuthMethod_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PrimaryAccountInitServiceGetSecondAuthMethodResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrimaryAccountInitServiceGetSecondAuthMethodResult(%+v)", *p)
}


